- 09:46:03 INFO: Opened log file for new session
- 09:46:03 INFO: model size: 739
- 09:46:03 DEBUG: observation predicates: 
- 09:46:03 DEBUG: 	D-DoorOpen
- 09:46:03 DEBUG: 	D-Driving
- 09:46:03 DEBUG: 	D-ElevatorEnter
- 09:46:03 DEBUG: 	D-ElevatorExit
- 09:46:03 DEBUG: 	D-GateEnter
- 09:46:03 DEBUG: 	D-GateExit
- 09:46:03 DEBUG: 	D-InCar
- 09:46:03 DEBUG: 	D-Similar
- 09:46:03 DEBUG: 	D-Track
- 09:46:03 DEBUG: 	D-TrunkOpen
- 09:46:03 DEBUG: 	D-Walking
- 09:46:03 INFO: searching for a maximum-weight model, with p=0.25 and iterations=1000
- 09:46:03 WARN: currently cannot generate moves for sentence: "!ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) v !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!ElevatorExit(p1) v <>{m} ElevatorExit(p1) v !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!GateEnter(p1) v <>{m} GateEnter(p1) v !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!GateExit(p1) v <>{m} GateExit(p1) v !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!ElevatorEnter(p2) v <>{m} ElevatorEnter(p2) v !<>{m, o, fi, <} (DoorOpen(p2) v Driving(p2) v ElevatorExit(p2) v GateEnter(p2) v GateExit(p2) v InCar(p2) v TrunkOpen(p2) v Walking(p2))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!ElevatorExit(p2) v <>{m} ElevatorExit(p2) v !<>{m, o, fi, <} (DoorOpen(p2) v Driving(p2) v ElevatorEnter(p2) v GateEnter(p2) v GateExit(p2) v InCar(p2) v TrunkOpen(p2) v Walking(p2))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!GateEnter(p2) v <>{m} GateEnter(p2) v !<>{m, o, fi, <} (DoorOpen(p2) v Driving(p2) v ElevatorEnter(p2) v ElevatorExit(p2) v GateExit(p2) v InCar(p2) v TrunkOpen(p2) v Walking(p2))".
- 09:46:03 WARN: currently cannot generate moves for sentence: "!GateExit(p2) v <>{m} GateExit(p2) v !<>{m, o, fi, <} (DoorOpen(p2) v Driving(p2) v ElevatorEnter(p2) v ElevatorExit(p2) v GateEnter(p2) v InCar(p2) v TrunkOpen(p2) v Walking(p2))".
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}

- 09:46:03 DEBUG: current score: 2331420
- 09:46:03 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:03 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:03 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p2, p2t1) @ {[1:60]}

- 09:46:03 DEBUG: current score: 2331278
- 09:46:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:03 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:03 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:03 DEBUG: remembering this model as best scoring so far
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2332318
- 09:46:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:03 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:03 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2317232
- 09:46:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:03 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:03 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:03 DEBUG: remembering this model as best scoring so far
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2334121
- 09:46:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:03 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:03 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2310391
- 09:46:03 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:03 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[21:25]}
- 09:46:03 DEBUG: choosing [1:20] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:20]}), (toAdd: {HasTrack(p2, p1t2) @ [1:20]}, toDel: {})
- 09:46:03 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:20]}, toDel: {}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p1t2) @ {[1:20]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2277291
- 09:46:03 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:03 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:03 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:03 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [21:25]}, toDel: {})
- 09:46:03 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [21:25]}, toDel: {}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p1t2) @ {[1:20]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:03 DEBUG: current score: 2300921
- 09:46:03 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:46:03 DEBUG: sentence true at :{[1:20]}
- 09:46:03 DEBUG: sentence NOT true at :{[(1, 20), (21, 60)], [21:60]}
- 09:46:03 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [21:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:46:03 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:46:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2334121
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:04 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:04 DEBUG: remembering this model as best scoring so far
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2335111
- 09:46:04 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2327587
- 09:46:04 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:04 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2330699
- 09:46:04 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:04 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:04 DEBUG: remembering this model as best scoring so far
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2338223
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:04 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:46:04 DEBUG: remembering this model as best scoring so far
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2338486
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:04 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:04 DEBUG: remembering this model as best scoring so far
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2339385
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:04 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:04 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2317697
- 09:46:04 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[2:18]}
- 09:46:04 DEBUG: choosing [19:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [19:60]}), (toAdd: {HasTrack(p1, p1t2) @ [19:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [19:60]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:1]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2296510
- 09:46:04 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:04 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:04 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:04 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:1]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2297409
- 09:46:04 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:04 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[1:1]}
- 09:46:04 DEBUG: choosing [2:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [2:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [2:60]}, toDel: {}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2338486
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:04 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2338476
- 09:46:04 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2330952
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:04 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:04 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:19], [23:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2309388
- 09:46:04 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:04 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:19], [23:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:04 DEBUG: current score: 2316912
- 09:46:04 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:04 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:04 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:04 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:19], [23:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2316566
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:05 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:19], [23:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2317492
- 09:46:05 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) to improve.
- 09:46:05 DEBUG: sentence true at :{[1:19], [23:60]}
- 09:46:05 DEBUG: sentence NOT true at :{[(1, 19), (20, 60)], [(20, 22), (20, 60)]}
- 09:46:05 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [20:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]})
- 09:46:05 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2339056
- 09:46:05 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:05 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:05 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:05 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:05 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2339066
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:05 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:05 DEBUG: remembering this model as best scoring so far
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2340311
- 09:46:05 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2338912
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:05 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2340037
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:05 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2340027
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] satisfied at {[1:49], [51:60]}
- 09:46:05 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {}
- 09:46:05 DEBUG: remembering this model as best scoring so far
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2340577
- 09:46:05 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:05 DEBUG: current score: 2339178
- 09:46:05 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:05 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:05 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:05 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2338983
- 09:46:06 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:06 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2288645
- 09:46:06 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-Walking(p1t1) v Walking(p2) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-Walking(p1t1) v Walking(p2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:06 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [2:18]}), (toAdd: {Walking(p2) @ [2:18]}, toDel: {})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [2:18]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1], [19:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2276624
- 09:46:06 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1], [19:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2277333
- 09:46:06 DEBUG: choosing sentence: [ !HasTrack(p2, p1t1) v !HasTrack(p2, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:06 DEBUG: sentence [ !HasTrack(p2, p1t1) v !HasTrack(p2, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:18], [26:60]}
- 09:46:06 DEBUG: choosing [19:25] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [19:25]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [19:25]})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [19:25]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1], [26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2314753
- 09:46:06 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:06 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:06 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:06 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1], [26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2315638
- 09:46:06 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {[1:1], [26:60]}
- 09:46:06 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [2:25]}), (toAdd: {HasTrack(p2, p1t1) @ [2:25]}, toDel: {})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [2:25]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1], [26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2291658
- 09:46:06 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p2, p1t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p2, p1t1) v HasTrack(p2, p1t2) ] satisfied at {[2:25]}
- 09:46:06 DEBUG: choosing [26:60] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [26:60]}), (toAdd: {HasTrack(p2, p1t2) @ [26:60]}, toDel: {})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [26:60]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:06 DEBUG: current score: 2279023
- 09:46:06 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:06 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:06 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:06 DEBUG: current score: 2279527
- 09:46:06 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:06 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:06 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:06 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:06 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:06 DEBUG: current score: 2279537
- 09:46:06 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:06 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:46:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:06 DEBUG: current score: 2200088
- 09:46:06 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] to improve.
- 09:46:06 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] satisfied at {[1:34], [51:60]}
- 09:46:06 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [35:50]}), (toAdd: {Driving(p2) @ [35:50]}, toDel: {})
- 09:46:06 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [35:50]}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2208854
- 09:46:07 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:07 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:07 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:07 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:1], [26:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2209753
- 09:46:07 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t2) v HasTrack(p2, p2t2) to improve.
- 09:46:07 DEBUG: sentence true at :{[1:1], [26:60]}
- 09:46:07 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 25), (2, 60)]}
- 09:46:07 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]})
- 09:46:07 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:1]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2233148
- 09:46:07 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p2) ] to improve.
- 09:46:07 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p2) ] satisfied at {[2:60]}
- 09:46:07 DEBUG: choosing [1:1] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:1]}), (toAdd: {ElevatorEnter(p2) @ [1:1]}, toDel: {})
- 09:46:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:1]}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2269847
- 09:46:07 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:07 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [35:60]}
- 09:46:07 DEBUG: choosing [28:34] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:34]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:34]})
- 09:46:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:34]}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2311530
- 09:46:07 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:46:07 DEBUG: sentence true at :{[1:27], [51:60]}
- 09:46:07 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [(28, 50), (28, 60)]}
- 09:46:07 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:46:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:46:07 DEBUG: remembering this model as best scoring so far
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:07 DEBUG: current score: 2340591
- 09:46:07 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:07 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:07 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:07 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:07 DEBUG: remembering this model as best scoring so far
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:07 DEBUG: current score: 2341095
- 09:46:07 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:07 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:07 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]})
- 09:46:07 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]}
- 09:46:07 DEBUG: remembering this model as best scoring so far
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:07 DEBUG: current score: 2341645
- 09:46:07 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:07 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:07 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:07 DEBUG: current score: 2340246
- 09:46:07 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:07 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:07 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:07 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:07 DEBUG: current score: 2340051
- 09:46:07 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:07 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:07 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:07 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:07 DEBUG: current score: 2340555
- 09:46:08 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:08 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:08 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:08 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2340120
- 09:46:08 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2338721
- 09:46:08 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:08 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:08 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:08 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:08 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2339067
- 09:46:08 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:08 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2338721
- 09:46:08 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:08 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2339271
- 09:46:08 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2328323
- 09:46:08 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2331051
- 09:46:08 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2316269
- 09:46:08 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:46:08 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:46:08 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:08 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:08 DEBUG: current score: 2317723
- 09:46:08 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:08 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:08 DEBUG: current score: 2318227
- 09:46:08 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:08 DEBUG: current score: 2331901
- 09:46:08 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:08 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:08 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:08 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:08 DEBUG: current score: 2331706
- 09:46:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:09 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:09 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2332680
- 09:46:09 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:49], [51:60]}
- 09:46:09 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2332988
- 09:46:09 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:09 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2333887
- 09:46:09 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:09 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:09 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2334772
- 09:46:09 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2319990
- 09:46:09 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:09 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2323621
- 09:46:09 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:09 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:09 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2324611
- 09:46:09 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:09 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:09 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2329876
- 09:46:09 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:09 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:09 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2338748
- 09:46:09 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:09 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2339252
- 09:46:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:09 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:09 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2340242
- 09:46:09 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:09 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:09 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:09 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2339807
- 09:46:09 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:09 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:09 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:09 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:09 DEBUG: current score: 2332588
- 09:46:09 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:09 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:09 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:09 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:09 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2332934
- 09:46:10 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:10 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [6:60]}
- 09:46:10 DEBUG: choosing [2:5] as the interval to satisfy
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:5], D-Walking(p1t1) @ [2:5]}, toDel: {}
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:5], D-Walking(p2t1) @ [2:5]}, toDel: {}
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:5], D-Walking(p2t2) @ [2:5]}, toDel: {}
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:5]})
- 09:46:10 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:5]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2333223
- 09:46:10 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) to improve.
- 09:46:10 DEBUG: sentence true at :{[6:60]}
- 09:46:10 DEBUG: sentence NOT true at :{[(1, 5), (1, 60)]}
- 09:46:10 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]})
- 09:46:10 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2339864
- 09:46:10 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:10 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2339518
- 09:46:10 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:10 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2340417
- 09:46:10 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2336187
- 09:46:10 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2325542
- 09:46:10 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:10 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2326911
- 09:46:10 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:10 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:10 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:27], [31:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2307211
- 09:46:10 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:10 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:10 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:10 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:10 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t2) @ {[1:27], [31:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2307557
- 09:46:10 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[28:30]}
- 09:46:10 DEBUG: choosing [1:27] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:27]}), (toAdd: {HasTrack(p1, p2t1) @ [1:27]}, toDel: {})
- 09:46:10 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:27]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t2) @ {[31:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2300915
- 09:46:10 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:10 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[1:30]}
- 09:46:10 DEBUG: choosing [31:60] as the interval to satisfy
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [31:60]}), (toAdd: {HasTrack(p1, p2t1) @ [31:60]}, toDel: {})
- 09:46:10 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [31:60]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2332409
- 09:46:10 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:10 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:10 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:10 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[6:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:10 DEBUG: current score: 2333778
- 09:46:10 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:10 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:5], [19:22], [26:60]}
- 09:46:10 DEBUG: choosing [6:18] as the interval to satisfy
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [6:18], D-Walking(p1t1) @ [6:18]}, toDel: {}
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [6:18], D-Walking(p2t1) @ [6:18]}, toDel: {}
- 09:46:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [6:18], D-Walking(p2t2) @ [6:18]}, toDel: {}
- 09:46:10 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [6:18]})
- 09:46:10 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [6:18]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2334006
- 09:46:11 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:11 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:22], [26:60]}
- 09:46:11 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2334953
- 09:46:11 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2325209
- 09:46:11 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:11 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:11 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:11 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2310338
- 09:46:11 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:11 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:11 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2311328
- 09:46:11 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:11 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:11 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2312573
- 09:46:11 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:11 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2315829
- 09:46:11 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:11 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2315438
- 09:46:11 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] satisfied at {[1:49], [51:60]}
- 09:46:11 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2315988
- 09:46:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:11 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:11 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2290713
- 09:46:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:11 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2291958
- 09:46:11 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:11 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2308632
- 09:46:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:11 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2309622
- 09:46:11 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:11 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:11 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:11 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2309427
- 09:46:11 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:11 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:11 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:11 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:11 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:11 DEBUG: current score: 2310326
- 09:46:11 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t1) v HasTrack(p2, p2t1) to improve.
- 09:46:11 DEBUG: sentence true at :{[1:1], [21:60]}
- 09:46:11 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 20), (2, 60)]}
- 09:46:11 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]})
- 09:46:12 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [2:60]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2334013
- 09:46:12 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:12 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2337125
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:12 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2327019
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:12 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2323013
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:12 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2323003
- 09:46:12 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:12 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:12 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:12 DEBUG: taking random move: toAdd: {InCar(p2) @ [2:15]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2339002
- 09:46:12 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:12 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2337603
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:12 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:12 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2337408
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:12 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2337958
- 09:46:12 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:12 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2330606
- 09:46:12 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:12 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:12 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:12 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:12 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2330801
- 09:46:12 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:46:12 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[6:60]}
- 09:46:12 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:12 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:5], D-ElevatorEnter(p1t1) @ [1:5]}, toDel: {}
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:12 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:12 DEBUG: current score: 2331391
- 09:46:12 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:12 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:12 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:12 DEBUG: taking random move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2331895
- 09:46:13 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2330496
- 09:46:13 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2321244
- 09:46:13 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:13 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:13 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2321049
- 09:46:13 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2327821
- 09:46:13 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:13 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:13 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2327386
- 09:46:13 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:13 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:13 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-InCar(p1t2) @ [2:15]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-InCar(p2t1) @ [2:15]}, toDel: {}
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:15]})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:15]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2312300
- 09:46:13 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:13 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:13 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:13 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2312495
- 09:46:13 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2311786
- 09:46:13 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:13 DEBUG: current score: 2312495
- 09:46:13 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:51]}
- 09:46:13 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:13 DEBUG: current score: 2312729
- 09:46:13 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:13 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:13 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:13 DEBUG: current score: 2313628
- 09:46:13 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:13 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:13 DEBUG: current score: 2314668
- 09:46:13 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:13 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:49], [51:60]}
- 09:46:13 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:13 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[52:60]}

- 09:46:13 DEBUG: current score: 2315418
- 09:46:13 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:13 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:13 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2315223
- 09:46:14 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:14 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:14 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2319757
- 09:46:14 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:14 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:14 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:14 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:14 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2319952
- 09:46:14 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:14 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:14 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]})
- 09:46:14 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2320502
- 09:46:14 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:14 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:14 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:15]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2336501
- 09:46:14 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:14 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2336306
- 09:46:14 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:14 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:14 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2329085
- 09:46:14 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:15], [21:60]}
- 09:46:14 DEBUG: choosing [16:20] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [16:20]}), (toAdd: {InCar(p2) @ [16:20]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [16:20]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2329975
- 09:46:14 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) to improve.
- 09:46:14 DEBUG: sentence true at :{[6:60]}
- 09:46:14 DEBUG: sentence NOT true at :{[(1, 5), (1, 60)]}
- 09:46:14 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]})
- 09:46:14 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2328626
- 09:46:14 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:14 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:14 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:14 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:14 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2328972
- 09:46:14 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:14 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2330217
- 09:46:14 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:14 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:14 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2338787
- 09:46:14 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:14 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}

- 09:46:14 DEBUG: current score: 2337388
- 09:46:14 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:14 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:14 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:14 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}

- 09:46:15 DEBUG: current score: 2337193
- 09:46:15 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}

- 09:46:15 DEBUG: current score: 2335794
- 09:46:15 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:15 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:15 DEBUG: current score: 2336834
- 09:46:15 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:15 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:15 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:15 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:15 DEBUG: current score: 2337719
- 09:46:15 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:15 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:15 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:46:15 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:15 DEBUG: current score: 2338223
- 09:46:15 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:15 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2338727
- 09:46:15 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2338428
- 09:46:15 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:15 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2339402
- 09:46:15 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:15 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2339392
- 09:46:15 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2335162
- 09:46:15 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:15 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2336149
- 09:46:15 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:15 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:15 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:15 DEBUG: current score: 2336448
- 09:46:16 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:16 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:16 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2314149
- 09:46:16 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:16 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:16 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2315518
- 09:46:16 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:16 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:16 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2315323
- 09:46:16 DEBUG: choosing sentence: [ !HasTrack(p1, p2t2) v !HasTrack(p1, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] to improve.
- 09:46:16 DEBUG: sentence [ !HasTrack(p1, p2t2) v !HasTrack(p1, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] satisfied at {[1:49], [51:60]}
- 09:46:16 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [50:50]})
- 09:46:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [50:50]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2325246
- 09:46:16 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:16 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:16 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:16 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:16 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2325441
- 09:46:16 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:16 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2325740
- 09:46:16 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[50:50]}
- 09:46:16 DEBUG: choosing [1:49] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:49]}), (toAdd: {HasTrack(p1, p2t1) @ [1:49]}, toDel: {})
- 09:46:16 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:49]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2301335
- 09:46:16 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[51:60]}
- 09:46:16 DEBUG: choosing [1:50] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:50]}), (toAdd: {HasTrack(p1, p1t2) @ [1:50]}, toDel: {})
- 09:46:16 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:50]}, toDel: {}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2337817
- 09:46:16 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:16 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:16 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2324851
- 09:46:16 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:16 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:16 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:16 DEBUG: current score: 2322981
- 09:46:16 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:16 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:16 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:16 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:16 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:16 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:16 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2324350
- 09:46:17 DEBUG: choosing sentence: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] to improve.
- 09:46:17 DEBUG: sentence [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {Driving(p1) @ [47:50]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p1) @ [47:50], GateExit(p1) @ [47:50]})
- 09:46:17 DEBUG: taking random move: toAdd: {Driving(p1) @ [47:50]}, toDel: {}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2312656
- 09:46:17 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:17 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:17 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2233146
- 09:46:17 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-GateExit(p1t2) v GateExit(p2) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-GateExit(p1t2) v GateExit(p2) ] satisfied at {[1:46], [51:60]}
- 09:46:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [47:50]}), (toAdd: {GateExit(p2) @ [47:50]}, toDel: {})
- 09:46:17 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [47:50]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2241376
- 09:46:17 DEBUG: choosing sentence: [ !Driving(p1) v InCar(p1) ] to improve.
- 09:46:17 DEBUG: sentence [ !Driving(p1) v InCar(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [47:50]}), (toAdd: {InCar(p1) @ [47:50]}, toDel: {})
- 09:46:17 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [47:50]}, toDel: {}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2254562
- 09:46:17 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] satisfied at {[1:28], [47:60]}
- 09:46:17 DEBUG: choosing [29:46] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:46]}), (toAdd: {InCar(p2) @ [29:46]}, toDel: {})
- 09:46:17 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:46]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2259462
- 09:46:17 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:17 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [29:60]}
- 09:46:17 DEBUG: choosing [28:28] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:28]})
- 09:46:17 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2296781
- 09:46:17 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] satisfied at {[28:50]}
- 09:46:17 DEBUG: choosing [1:27] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:27]}), (toAdd: {HasTrack(p2, p1t1) @ [1:27]}, toDel: {})
- 09:46:17 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:27]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2289842
- 09:46:17 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:17 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:46], [51:60]}
- 09:46:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-Driving(p1t2) @ [47:50]}, toDel: {}
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [47:50], D-Driving(p2t1) @ [47:50]}, toDel: {}
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [47:50]})
- 09:46:17 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [47:50]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2287656
- 09:46:17 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:17 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:17 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2287357
- 09:46:17 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:17 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-GateExit(p1t2) @ [47:50]}, toDel: {}
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:46:17 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2301711
- 09:46:17 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:17 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:17 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:17 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:17 DEBUG: current score: 2300199
- 09:46:17 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:17 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:17 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:17 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:17 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2300749
- 09:46:18 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:46:18 DEBUG: sentence true at :{[51:60]}
- 09:46:18 DEBUG: sentence NOT true at :{[(1, 50), (1, 60)]}
- 09:46:18 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:46:18 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2336749
- 09:46:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:18 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:18 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2279239
- 09:46:18 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] satisfied at {[1:28], [51:60]}
- 09:46:18 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:50]}), (toAdd: {InCar(p2) @ [29:50]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:50]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2270369
- 09:46:18 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:18 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2248949
- 09:46:18 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:18 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:18 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:18 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:18 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2248959
- 09:46:18 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] satisfied at {[1:27], [29:60]}
- 09:46:18 DEBUG: choosing [28:28] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]}), (toAdd: {DoorOpen(p2) @ [28:28]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2286278
- 09:46:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[1:27], [51:60]}
- 09:46:18 DEBUG: choosing [28:50] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:50]}), (toAdd: {HasTrack(p2, p1t2) @ [28:50]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p1t2) @ [28:50]}, toDel: {}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2257829
- 09:46:18 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:18 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [46:60]}
- 09:46:18 DEBUG: choosing [28:45] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:45]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:45]})
- 09:46:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:45]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2285364
- 09:46:18 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] satisfied at {[28:45]}
- 09:46:18 DEBUG: choosing [46:60] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [46:60]}), (toAdd: {HasTrack(p2, p1t1) @ [46:60]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [46:60]}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:18 DEBUG: current score: 2285408
- 09:46:18 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:18 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:18 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:18 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2285398
- 09:46:19 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:46:19 DEBUG: sentence true at :{[1:27]}
- 09:46:19 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [28:60]}
- 09:46:19 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2315329
- 09:46:19 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2314481
- 09:46:19 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:19 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:19 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2314723
- 09:46:19 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:19 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2315571
- 09:46:19 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2314723
- 09:46:19 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2303871
- 09:46:19 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:19 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:19 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2289000
- 09:46:19 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:19 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:19 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2288565
- 09:46:19 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:19 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:19 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:19 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:19 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2288575
- 09:46:19 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:19 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:19 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2282497
- 09:46:19 DEBUG: choosing sentence: [ !Driving(p1) v InCar(p1) ] to improve.
- 09:46:19 DEBUG: sentence [ !Driving(p1) v InCar(p1) ] satisfied at {[1:34], [47:60]}
- 09:46:19 DEBUG: choosing [35:46] as the interval to satisfy
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:46]}), (toAdd: {InCar(p1) @ [35:46]}, toDel: {})
- 09:46:19 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:46]}
- 09:46:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:19 DEBUG: current score: 2305583
- 09:46:19 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:19 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:60]}
- 09:46:19 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:19 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:19 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p1) @ {[47:50]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2306509
- 09:46:20 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:20 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:46], [51:60]}
- 09:46:20 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:20 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-InCar(p1t2) @ [47:50]}, toDel: {}
- 09:46:20 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [47:50], D-InCar(p2t1) @ [47:50]}, toDel: {}
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [47:50]})
- 09:46:20 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [47:50]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2293323
- 09:46:20 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:20 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:20 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:20 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:46:20 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:46:20 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
GateEnter(p2) @ {[2:10]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2298917
- 09:46:20 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:20 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:20 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2303827
- 09:46:20 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:20 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[47:50]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2311073
- 09:46:20 DEBUG: choosing sentence: [ !Driving(p1) v InCar(p1) ] to improve.
- 09:46:20 DEBUG: sentence [ !Driving(p1) v InCar(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:20 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [47:50]}), (toAdd: {InCar(p1) @ [47:50]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p1) @ [47:50]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2325647
- 09:46:20 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2325256
- 09:46:20 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:20 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:20 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:20 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:20 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2336682
- 09:46:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:20 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2325256
- 09:46:20 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:20 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:20 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2318032
- 09:46:20 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:46:20 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:20 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [2:10]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]})
- 09:46:20 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2329458
- 09:46:20 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:20 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2327202
- 09:46:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:20 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2328211
- 09:46:20 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:20 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:20 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2329580
- 09:46:20 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:20 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:20 DEBUG: taking random move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:20 DEBUG: current score: 2330760
- 09:46:20 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:20 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:21 DEBUG: current score: 2319220
- 09:46:21 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:21 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:21 DEBUG: current score: 2310650
- 09:46:21 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {[55:60]}
- 09:46:21 DEBUG: choosing [1:54] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:54]}), (toAdd: {HasTrack(p2, p2t1) @ [1:54]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:54]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:21 DEBUG: current score: 2321649
- 09:46:21 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:51]}
- 09:46:21 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:21 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2322419
- 09:46:21 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:21 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2323664
- 09:46:21 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:21 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2324482
- 09:46:21 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:21 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:21 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2325381
- 09:46:21 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:21 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:21 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}

- 09:46:21 DEBUG: current score: 2325885
- 09:46:21 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:21 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:21 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}

- 09:46:21 DEBUG: current score: 2329741
- 09:46:21 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:21 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}

- 09:46:21 DEBUG: current score: 2318315
- 09:46:21 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:21 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:21 DEBUG: current score: 2319560
- 09:46:21 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:46:21 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:21 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [2:10]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]})
- 09:46:21 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:21 DEBUG: current score: 2330986
- 09:46:21 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:21 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:21 DEBUG: current score: 2329587
- 09:46:21 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:21 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2330091
- 09:46:21 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:21 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:21 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:46:21 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:46:21 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:21 DEBUG: current score: 2331271
- 09:46:21 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:21 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:21 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:21 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2332065
- 09:46:22 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:22 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2332456
- 09:46:22 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:22 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:22 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2335568
- 09:46:22 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:22 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:22 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2310638
- 09:46:22 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:22 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2311537
- 09:46:22 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:22 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:46:22 DEBUG: current score: 2311527
- 09:46:22 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:22 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:22 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:22 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:22 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:22 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:22 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2312031
- 09:46:22 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:22 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2311685
- 09:46:22 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:22 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:22 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:22 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:22 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2311695
- 09:46:22 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:22 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2312177
- 09:46:22 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:22 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:22 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:22 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:22 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2312167
- 09:46:22 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:22 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:22 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:22 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:22 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:22 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:22 DEBUG: current score: 2312513
- 09:46:22 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t1) v HasTrack(p2, p2t1) to improve.
- 09:46:22 DEBUG: sentence true at :{[1:25], [31:60]}
- 09:46:22 DEBUG: sentence NOT true at :{[(1, 25), (26, 60)], [(26, 30), (26, 60)]}
- 09:46:22 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [26:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]})
- 09:46:23 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:23 DEBUG: current score: 2337443
- 09:46:23 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:23 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:23 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:23 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:23 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:23 DEBUG: current score: 2337453
- 09:46:23 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:23 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:23 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:23 DEBUG: current score: 2330232
- 09:46:23 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:5], [19:22], [26:60]}
- 09:46:23 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:46:23 DEBUG: taking random move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2330495
- 09:46:23 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:23 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[6:60]}
- 09:46:23 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:5]}, toDel: {})
- 09:46:23 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [1:5]}, toDel: {}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2337716
- 09:46:23 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:23 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:23 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2314317
- 09:46:23 DEBUG: choosing sentence: [ !HasTrack(p1, p2t2) v !HasTrack(p1, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] to improve.
- 09:46:23 DEBUG: sentence [ !HasTrack(p1, p2t2) v !HasTrack(p1, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] satisfied at {[1:49], [51:60]}
- 09:46:23 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [50:50]})
- 09:46:23 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2325318
- 09:46:23 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:23 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:23 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:51]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2325078
- 09:46:23 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:23 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:23 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:51]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2324732
- 09:46:23 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t2) v HasTrack(p1, p2t2) to improve.
- 09:46:23 DEBUG: sentence true at :{[1:49], [51:51]}
- 09:46:23 DEBUG: sentence NOT true at :{[(1, 49), (50, 60)], [(50, 50), (50, 60)], [(51, 51), (52, 60)], [52:60]}
- 09:46:23 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [50:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [51:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [52:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]})
- 09:46:23 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2337370
- 09:46:23 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:23 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:23 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:23 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:46:23 DEBUG: current score: 2327590
- 09:46:23 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:23 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:22], [26:60]}
- 09:46:23 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:23 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:46:23 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:46:23 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:46:23 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:46:23 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:46:23 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:23 DEBUG: current score: 2328537
- 09:46:24 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:24 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2329577
- 09:46:24 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:24 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2318455
- 09:46:24 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:24 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:24 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2327025
- 09:46:24 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:24 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:24 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:24 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:24 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:24 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:24 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2328270
- 09:46:24 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:24 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2314804
- 09:46:24 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:24 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:24 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:24 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2323436
- 09:46:24 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:24 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2323699
- 09:46:24 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:24 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2338759
- 09:46:24 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:24 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2339685
- 09:46:24 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:24 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2335455
- 09:46:24 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:24 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:24 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:24 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:46:24 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:46:24 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2322755
- 09:46:24 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:24 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:24 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:24 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:24 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:24 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:24 DEBUG: current score: 2321356
- 09:46:24 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:24 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:24 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:24 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2321702
- 09:46:25 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:25 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:25 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:25 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2323071
- 09:46:25 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:25 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2324316
- 09:46:25 DEBUG: choosing sentence: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] to improve.
- 09:46:25 DEBUG: sentence [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:25 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {Driving(p1) @ [47:50]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p1) @ [47:50], GateExit(p1) @ [47:50]})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p1) @ [47:50], GateExit(p1) @ [47:50]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2339170
- 09:46:25 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:25 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:46:25 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2340157
- 09:46:25 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:25 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:25 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2329209
- 09:46:25 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:25 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:25 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2340157
- 09:46:25 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:25 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2330143
- 09:46:25 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:25 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2330693
- 09:46:25 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:25 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:25 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2304463
- 09:46:25 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:25 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:25 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2304268
- 09:46:25 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:25 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2312498
- 09:46:25 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:25 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:25 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:25 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2297627
- 09:46:25 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:25 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:25 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:25 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:25 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:25 DEBUG: current score: 2314301
- 09:46:25 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:25 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:25 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:25 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [47:50]}), (toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2306071
- 09:46:26 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:26 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2314301
- 09:46:26 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:26 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2314291
- 09:46:26 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:26 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:26 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:26 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2320699
- 09:46:26 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:26 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2320308
- 09:46:26 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:26 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2313900
- 09:46:26 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:26 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [47:50]}), (toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {})
- 09:46:26 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2327670
- 09:46:26 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:26 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:26 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:26 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:26 DEBUG: taking random move: toAdd: {GateExit(p1) @ [3:60]}, toDel: {}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2289147
- 09:46:26 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:26 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2289697
- 09:46:26 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:26 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:26 DEBUG: current score: 2290942
- 09:46:26 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:26 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:26 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:26 DEBUG: current score: 2291982
- 09:46:26 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:2], [47:50]}
- 09:46:26 DEBUG: choosing [51:60] as the interval to satisfy
- 09:46:26 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [51:60], D-GateExit(p1t2) @ [51:60]}, toDel: {}
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [51:60]})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [51:60]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateExit(p1) @ {[3:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:26 DEBUG: current score: 2293377
- 09:46:26 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:26 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:26 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:26 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:26 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:26 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[3:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:26 DEBUG: current score: 2294262
- 09:46:26 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:26 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:26 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:26 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[3:50]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:27 DEBUG: current score: 2282734
- 09:46:27 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:27 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:2], [47:60]}
- 09:46:27 DEBUG: choosing [3:46] as the interval to satisfy
- 09:46:27 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [3:46], D-GateExit(p1t2) @ [3:46]}, toDel: {}
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [3:46]})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [3:46]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:27 DEBUG: current score: 2306896
- 09:46:27 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:27 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:27 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:27 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:27 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:27 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2307138
- 09:46:27 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:27 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2317498
- 09:46:27 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2307138
- 09:46:27 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:27 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2317498
- 09:46:27 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:27 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:27 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2293636
- 09:46:27 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:27 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:27 DEBUG: taking random move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:27 DEBUG: current score: 2294623
- 09:46:27 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:27 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:27 DEBUG: current score: 2295549
- 09:46:27 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:27 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:27 DEBUG: current score: 2297387
- 09:46:27 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:27 DEBUG: current score: 2295988
- 09:46:27 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:27 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:27 DEBUG: current score: 2297028
- 09:46:27 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[35:50]}
- 09:46:27 DEBUG: choosing [51:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [51:60]}), (toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [51:60]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:27 DEBUG: current score: 2296088
- 09:46:27 DEBUG: choosing sentence: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] to improve.
- 09:46:27 DEBUG: sentence [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:27 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {Driving(p1) @ [47:50]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p1) @ [47:50], GateExit(p1) @ [47:50]})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p1) @ [47:50], GateExit(p1) @ [47:50]}
- 09:46:27 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:27 DEBUG: current score: 2310442
- 09:46:27 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:27 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:27 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:27 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:27 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2302864
- 09:46:28 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:28 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:28 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2310442
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:28 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:28 DEBUG: taking random move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2311451
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:28 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:28 DEBUG: taking random move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2311256
- 09:46:28 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:28 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:28 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:28 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:28 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2311266
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [35:60]}
- 09:46:28 DEBUG: choosing [29:34] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:34]}), (toAdd: {InCar(p1) @ [29:34]}, toDel: {})
- 09:46:28 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:34]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2312339
- 09:46:28 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:28 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:28 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2310940
- 09:46:28 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:28 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:28 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2260602
- 09:46:28 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:28 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:28 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:28 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:28 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:28 DEBUG: current score: 2260797
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:28 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:28 DEBUG: taking random move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:28 DEBUG: current score: 2261301
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:28 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:28 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:28 DEBUG: current score: 2261106
- 09:46:28 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-Walking(p1t1) v Walking(p2) ] to improve.
- 09:46:28 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-Walking(p1t1) v Walking(p2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:28 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:28 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [23:25]}), (toAdd: {Walking(p2) @ [23:25]}, toDel: {})
- 09:46:28 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [23:25]}, toDel: {}
- 09:46:28 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:28 DEBUG: current score: 2261369
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:29 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:29 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2262163
- 09:46:29 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:34]}
- 09:46:29 DEBUG: choosing [35:60] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [35:60]}), (toAdd: {HasTrack(p1, p1t2) @ [35:60]}, toDel: {})
- 09:46:29 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [35:60]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2262693
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:29 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:29 DEBUG: taking random move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2262498
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:29 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:29 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2273499
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:29 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:29 DEBUG: taking random move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2260033
- 09:46:29 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:29 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:29 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2156270
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p1) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p1) ] satisfied at {[1:20], [26:60]}
- 09:46:29 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p1) @ [21:25]}, toDel: {})
- 09:46:29 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [21:25]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2157260
- 09:46:29 DEBUG: choosing sentence: [ !HasTrack(p2, p1t1) v !HasTrack(p2, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:29 DEBUG: sentence [ !HasTrack(p2, p1t1) v !HasTrack(p2, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:1], [26:60]}
- 09:46:29 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [2:25]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:25]})
- 09:46:29 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [2:25]}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:1], [26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2181449
- 09:46:29 DEBUG: choosing sentence: !GateExit(p1) v <>{<} ElevatorEnter(p1) to improve.
- 09:46:29 DEBUG: sentence true at :{[(1, 46), (1, 60)], [(47, 50), (51, 60)], [51:60]}
- 09:46:29 DEBUG: sentence NOT true at :{[47:50]}
- 09:46:29 DEBUG: moves to consider: (toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}), (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:46:29 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}
- 09:46:29 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[1:1], [26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:29 DEBUG: current score: 2158742
- 09:46:29 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p2) ] to improve.
- 09:46:29 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p2, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p2) ] satisfied at {[2:60]}
- 09:46:29 DEBUG: choosing [1:1] as the interval to satisfy
- 09:46:29 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:1]}), (toAdd: {ElevatorEnter(p2) @ [1:1]}, toDel: {})
- 09:46:29 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:1]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2158806
- 09:46:30 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:30 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [50:50]}), (toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {})
- 09:46:30 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [50:50]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2145056
- 09:46:30 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] satisfied at {[1:25], [31:60]}
- 09:46:30 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:30]}), (toAdd: {Walking(p1) @ [26:30]}, toDel: {})
- 09:46:30 DEBUG: taking random move: toAdd: {Walking(p1) @ [26:30]}, toDel: {}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2126916
- 09:46:30 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Driving(p2t1) v Driving(p1) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Driving(p2t1) v Driving(p1) ] satisfied at {[1:1], [16:60]}
- 09:46:30 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:15]}), (toAdd: {Driving(p1) @ [2:15]}, toDel: {})
- 09:46:30 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:15]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [16:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2115675
- 09:46:30 DEBUG: choosing sentence: [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:30 DEBUG: sentence [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:15], [26:60]}
- 09:46:30 DEBUG: choosing [16:25] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [16:25]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [16:25]})
- 09:46:30 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [16:25]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2149865
- 09:46:30 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:30 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [50:50]}), (toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {})
- 09:46:30 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [50:50]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2144640
- 09:46:30 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t1) v HasTrack(p1, p2t1) to improve.
- 09:46:30 DEBUG: sentence true at :{[1:1], [26:49], [51:60]}
- 09:46:30 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 25), (2, 60)], [(26, 49), (50, 60)], [(50, 50), (50, 60)]}
- 09:46:30 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [26:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [50:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]})
- 09:46:30 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2226619
- 09:46:30 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:30 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:30 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2227601
- 09:46:30 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:30 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:30 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:30 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-GateExit(p1t2) @ [47:50]}, toDel: {}
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:46:30 DEBUG: taking random move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:46:30 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:30 DEBUG: current score: 2218735
- 09:46:30 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:30 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:30 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:30 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:31 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2219980
- 09:46:31 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:46:31 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[1:5], [49:60]}
- 09:46:31 DEBUG: choosing [6:48] as the interval to satisfy
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [6:48], D-ElevatorEnter(p1t1) @ [6:48]}, toDel: {}
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [6:48]})
- 09:46:31 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [6:48]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:30]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2266397
- 09:46:31 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:31 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:31 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [26:30]})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [26:30]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2286617
- 09:46:31 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:31 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:27], [31:60]}
- 09:46:31 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2286779
- 09:46:31 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:31 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:31 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:31 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2286974
- 09:46:31 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:31 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[50:50]}
- 09:46:31 DEBUG: choosing [1:49] as the interval to satisfy
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}), (toAdd: {HasTrack(p1, p2t1) @ [1:49]}, toDel: {})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2261984
- 09:46:31 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:31 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:31 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2249185
- 09:46:31 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:31 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:31 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:31 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2248990
- 09:46:31 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:31 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:31 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:46:31 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2249784
- 09:46:31 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:31 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:31 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:31 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:31 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:31 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:31 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t1) @ {[26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:31 DEBUG: current score: 2251029
- 09:46:31 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t1) v HasTrack(p2, p1t1) to improve.
- 09:46:31 DEBUG: sentence true at :{[26:60]}
- 09:46:31 DEBUG: sentence NOT true at :{[(1, 25), (1, 60)]}
- 09:46:31 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:60]})
- 09:46:32 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t1) @ [1:60]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2275904
- 09:46:32 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:32 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:32 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:32 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:32 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:32 DEBUG: taking random move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2276894
- 09:46:32 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:32 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:32 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p2t2) @ {[51:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2280525
- 09:46:32 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) to improve.
- 09:46:32 DEBUG: sentence true at :{[1:49], [51:60]}
- 09:46:32 DEBUG: sentence NOT true at :{[(1, 49), (50, 60)], [(50, 50), (50, 60)]}
- 09:46:32 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [50:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]})
- 09:46:32 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2294263
- 09:46:32 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:32 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:32 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:32 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:32 DEBUG: taking random move: toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
InCar(p1) @ {[29:34]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2256316
- 09:46:32 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:32 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [35:60]}
- 09:46:32 DEBUG: choosing [29:34] as the interval to satisfy
- 09:46:32 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:34], D-InCar(p1t2) @ [29:34]}, toDel: {}
- 09:46:32 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:34], D-InCar(p2t1) @ [29:34]}, toDel: {}
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:34]})
- 09:46:32 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [29:34]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2257389
- 09:46:32 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[1:50]}
- 09:46:32 DEBUG: choosing [51:60] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}), (toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {})
- 09:46:32 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2293548
- 09:46:32 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:32 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:32 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:32 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2297183
- 09:46:32 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:32 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:32 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:32 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:32 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2298068
- 09:46:32 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:32 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:32 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2299313
- 09:46:32 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:32 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:32 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2295083
- 09:46:32 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:32 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:32 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:32 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:32 DEBUG: current score: 2296452
- 09:46:32 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:32 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:32 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:32 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:33 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2297632
- 09:46:33 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:46:33 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[59:60]}
- 09:46:33 DEBUG: choosing [1:58] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [1:58], GateExit(p2) @ [1:58]})
- 09:46:33 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [1:58], GateExit(p2) @ [1:58]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2334980
- 09:46:33 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:33 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:33 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2335774
- 09:46:33 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:33 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:33 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2336748
- 09:46:33 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:33 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:33 DEBUG: taking random move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2337735
- 09:46:33 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:33 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:33 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2326207
- 09:46:33 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:33 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:33 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:33 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2326449
- 09:46:33 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:33 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:33 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:33 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:33 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2327348
- 09:46:33 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:33 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:33 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2319126
- 09:46:33 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:33 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:33 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:33 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:33 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2319716
- 09:46:33 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:33 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:33 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:33 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:33 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:33 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:33 DEBUG: current score: 2327698
- 09:46:34 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:46:34 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:34 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2327832
- 09:46:34 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:34 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:34 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:34 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2327822
- 09:46:34 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:34 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2312951
- 09:46:34 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:34 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:34 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:34 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:34 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2313836
- 09:46:34 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:34 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:34 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2208944
- 09:46:34 DEBUG: choosing sentence: [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:1], [26:60]}
- 09:46:34 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:25]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2233392
- 09:46:34 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:34 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:34 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[21:25], [28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2224830
- 09:46:34 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:34 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [21:25]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [21:25]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2225820
- 09:46:34 DEBUG: choosing sentence: [ !HasTrack(p1, p1t2) v !HasTrack(p1, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !HasTrack(p1, p1t2) v !HasTrack(p1, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [46:60]}
- 09:46:34 DEBUG: choosing [28:45] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:45]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:45]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:45]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [46:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2269965
- 09:46:34 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:34 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] satisfied at {[2:25], [28:45]}
- 09:46:34 DEBUG: choosing [46:60] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [46:60]}), (toAdd: {HasTrack(p1, p2t2) @ [46:60]}, toDel: {})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [46:60]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2267835
- 09:46:34 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:34 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:34 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:34 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2267680
- 09:46:34 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:34 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:34 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[23:30], [52:60]}

- 09:46:34 DEBUG: current score: 2268925
- 09:46:34 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:34 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:22], [31:51]}
- 09:46:34 DEBUG: choosing [23:30] as the interval to satisfy
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [23:30], D-Walking(p1t1) @ [23:30]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [23:30], D-Walking(p2t1) @ [23:30]}, toDel: {}
- 09:46:34 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [23:30], D-Walking(p2t2) @ [23:30]}, toDel: {}
- 09:46:34 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [23:30]})
- 09:46:34 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [23:30]}
- 09:46:34 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:34 DEBUG: current score: 2269767
- 09:46:34 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:34 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:34 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:34 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:34 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:35 DEBUG: current score: 2271213
- 09:46:35 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:35 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:35 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:35 DEBUG: current score: 2276115
- 09:46:35 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] satisfied at {[2:25], [28:60]}
- 09:46:35 DEBUG: choosing [1:1] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:1]}), (toAdd: {HasTrack(p1, p1t2) @ [1:1]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:1]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:35 DEBUG: current score: 2276145
- 09:46:35 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:35 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:35 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:35 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:35 DEBUG: current score: 2276155
- 09:46:35 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:35 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:35 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2276659
- 09:46:35 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:35 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:35 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[26:27]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2254428
- 09:46:35 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] satisfied at {[1:25], [28:60]}
- 09:46:35 DEBUG: choosing [26:27] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:27]}), (toAdd: {HasTrack(p1, p1t2) @ [26:27]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:27]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2293800
- 09:46:35 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:35 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2294790
- 09:46:35 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:35 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2293391
- 09:46:35 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:35 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:35 DEBUG: taking random move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2310280
- 09:46:35 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:35 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2311179
- 09:46:35 DEBUG: choosing sentence: [ !Driving(p1) v InCar(p1) ] to improve.
- 09:46:35 DEBUG: sentence [ !Driving(p1) v InCar(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:35 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]}), (toAdd: {InCar(p1) @ [35:50]}, toDel: {})
- 09:46:35 DEBUG: taking random move: toAdd: {InCar(p1) @ [35:50]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2333599
- 09:46:35 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:35 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:35 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:46:35 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:46:35 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:35 DEBUG: current score: 2334779
- 09:46:35 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:35 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:35 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:35 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:35 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:35 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2333380
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:36 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2333370
- 09:46:36 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:36 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2334769
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:36 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:36 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2309839
- 09:46:36 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:36 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:46:36 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:36 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:36 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:46:36 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2310826
- 09:46:36 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:36 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:36 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:36 DEBUG: current score: 2286072
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:36 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2286576
- 09:46:36 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[26:30]}
- 09:46:36 DEBUG: choosing [31:60] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:60]}), (toAdd: {HasTrack(p2, p1t2) @ [31:60]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:60]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2277426
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:36 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2277080
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:36 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:36 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2252715
- 09:46:36 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:36 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:36 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2260201
- 09:46:36 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:36 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [47:50]}), (toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {})
- 09:46:36 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {}
- 09:46:36 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:36 DEBUG: current score: 2252715
- 09:46:36 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:36 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[26:60]}
- 09:46:36 DEBUG: choosing [1:25] as the interval to satisfy
- 09:46:36 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:25]}), (toAdd: {HasTrack(p2, p1t2) @ [1:25]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:25]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2280243
- 09:46:37 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [35:60]}
- 09:46:37 DEBUG: choosing [29:34] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:34]}), (toAdd: {InCar(p1) @ [29:34]}, toDel: {})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:34]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:28], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2258867
- 09:46:37 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:37 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[1:1], [19:60]}
- 09:46:37 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [2:18]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [2:18]}, toDel: {}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:28], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2283232
- 09:46:37 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:37 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:37 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:37 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:46:37 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:28], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2272946
- 09:46:37 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[29:34]}
- 09:46:37 DEBUG: choosing [35:60] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:60]}), (toAdd: {HasTrack(p1, p2t1) @ [35:60]}, toDel: {})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:60]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:28]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2288776
- 09:46:37 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:46:37 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:37 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [2:10]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:28]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2301310
- 09:46:37 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:37 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:28]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2276945
- 09:46:37 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:46:37 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[1:1], [6:60]}
- 09:46:37 DEBUG: choosing [2:5] as the interval to satisfy
- 09:46:37 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:5], D-ElevatorEnter(p1t1) @ [2:5]}, toDel: {}
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [2:5]})
- 09:46:37 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [2:5]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:28]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2277514
- 09:46:37 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:37 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:37 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:28]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2281370
- 09:46:37 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:28]}
- 09:46:37 DEBUG: choosing [29:60] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [29:60]}), (toAdd: {HasTrack(p1, p1t2) @ [29:60]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [29:60]}, toDel: {}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2286916
- 09:46:37 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:37 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:37 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2294402
- 09:46:37 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:37 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:1], [19:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2293003
- 09:46:37 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:37 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {[1:1], [19:60]}
- 09:46:37 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:37 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [2:18]}), (toAdd: {HasTrack(p1, p1t1) @ [2:18]}, toDel: {})
- 09:46:37 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [2:18]}, toDel: {}
- 09:46:37 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:1]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:37 DEBUG: current score: 2316790
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[1:1], [6:60]}
- 09:46:38 DEBUG: choosing [2:5] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:5]}), (toAdd: {ElevatorEnter(p1) @ [2:5]}, toDel: {})
- 09:46:38 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [2:5]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:38 DEBUG: current score: 2316799
- 09:46:38 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t2) v HasTrack(p1, p1t2) to improve.
- 09:46:38 DEBUG: sentence true at :{[1:46], [51:60]}
- 09:46:38 DEBUG: sentence NOT true at :{[(1, 46), (47, 60)], [(47, 50), (47, 60)]}
- 09:46:38 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [47:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]})
- 09:46:38 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:38 DEBUG: current score: 2334067
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:38 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:60]}

- 09:46:38 DEBUG: current score: 2334617
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:38 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:38 DEBUG: taking random move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:60]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2335121
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:38 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:38 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:54]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:60]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2327897
- 09:46:38 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:38 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:54]}
- 09:46:38 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [55:60], D-Walking(p1t1) @ [55:60]}, toDel: {}
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [55:60], D-Walking(p2t1) @ [55:60]}, toDel: {}
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-Walking(p2t2) @ [55:60]}, toDel: {}
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [55:60]})
- 09:46:38 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [55:60]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:54]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:54]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2328242
- 09:46:38 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:38 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:54]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:54]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2320726
- 09:46:38 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[55:60]}
- 09:46:38 DEBUG: choosing [1:54] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:54]}), (toAdd: {HasTrack(p1, p2t1) @ [1:54]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:54]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25], [52:54]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2326917
- 09:46:38 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:38 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51], [55:60]}
- 09:46:38 DEBUG: choosing [52:54] as the interval to satisfy
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:54], D-Walking(p1t1) @ [52:54]}, toDel: {}
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:54], D-Walking(p2t1) @ [52:54]}, toDel: {}
- 09:46:38 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:54], D-Walking(p2t2) @ [52:54]}, toDel: {}
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:54]})
- 09:46:38 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:54]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2327400
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:38 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2327205
- 09:46:38 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:38 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:38 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:38 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:38 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2327400
- 09:46:38 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:38 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2334916
- 09:46:38 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:38 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:38 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:38 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:38 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:38 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[35:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:38 DEBUG: current score: 2335710
- 09:46:39 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:39 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-InCar(p1t2) @ [35:50]}, toDel: {}
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-InCar(p2t1) @ [35:50]}, toDel: {}
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [35:50]})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [35:50]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2336890
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:39 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2327786
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:39 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2331837
- 09:46:39 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:39 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2332827
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:39 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2328597
- 09:46:39 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:39 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:39 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [31:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2308922
- 09:46:39 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:39 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:39 DEBUG: taking random move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [31:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2309848
- 09:46:39 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:39 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [31:34], [51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2303754
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:39 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:39 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [31:34], [51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2293997
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[28:30], [35:50]}
- 09:46:39 DEBUG: choosing [51:60] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [51:60]}), (toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {})
- 09:46:39 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [31:34], [51:60]}
HasTrack(p1, p2t1) @ {[51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2258157
- 09:46:39 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:39 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:39 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [31:34], [51:60]}
HasTrack(p1, p2t1) @ {[51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2258399
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[28:30], [35:60]}
- 09:46:39 DEBUG: choosing [31:34] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [31:34]}), (toAdd: {HasTrack(p1, p2t1) @ [31:34]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [31:34]}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2259551
- 09:46:39 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {[28:60]}
- 09:46:39 DEBUG: choosing [1:27] as the interval to satisfy
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:27]}), (toAdd: {HasTrack(p1, p2t1) @ [1:27]}, toDel: {})
- 09:46:39 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t1) @ [1:27]}, toDel: {}
- 09:46:39 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:27], [51:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:39 DEBUG: current score: 2263090
- 09:46:39 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:39 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:39 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:39 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:39 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:39 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:40 DEBUG: current score: 2248219
- 09:46:40 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-GateEnter(p2t1) v GateEnter(p1) ] to improve.
- 09:46:40 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-GateEnter(p2t1) v GateEnter(p1) ] satisfied at {[1:1], [11:60]}
- 09:46:40 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:10]}), (toAdd: {GateEnter(p1) @ [2:10]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:10]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [11:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:40 DEBUG: current score: 2243892
- 09:46:40 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:46:40 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[6:60]}
- 09:46:40 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:5], D-ElevatorEnter(p1t1) @ [1:5]}, toDel: {}
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [11:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:40 DEBUG: current score: 2244482
- 09:46:40 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:40 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:40 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [11:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:46:40 DEBUG: current score: 2206547
- 09:46:40 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:40 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:40 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [11:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2207051
- 09:46:40 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Driving(p2t1) v Driving(p1) ] to improve.
- 09:46:40 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Driving(p2t1) v Driving(p1) ] satisfied at {[1:10], [16:60]}
- 09:46:40 DEBUG: choosing [11:15] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [11:15]}), (toAdd: {Driving(p1) @ [11:15]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [11:15]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [16:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2208776
- 09:46:40 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:40 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:40 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [16:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2225450
- 09:46:40 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p1) ] to improve.
- 09:46:40 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p1) ] satisfied at {[1:20], [26:60]}
- 09:46:40 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p1) @ [21:25]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [21:25]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [16:20], [26:27], [51:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2232465
- 09:46:40 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:40 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:40 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:40 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [16:20], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2232323
- 09:46:40 DEBUG: choosing sentence: [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:40 DEBUG: sentence [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:15], [21:60]}
- 09:46:40 DEBUG: choosing [16:20] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [16:20]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [16:20]})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [16:20]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:27], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2268678
- 09:46:40 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:40 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[1:27], [51:60]}
- 09:46:40 DEBUG: choosing [28:50] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [28:50]}), (toAdd: {HasTrack(p1, p1t2) @ [28:50]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [28:50]}, toDel: {}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2293213
- 09:46:40 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:40 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:40 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[23:25]}

- 09:46:40 DEBUG: current score: 2283675
- 09:46:40 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:40 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:49], [51:60]}
- 09:46:40 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:40 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:40 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:40 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:40 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2283983
- 09:46:41 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:41 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2284970
- 09:46:41 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:41 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [51:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2285112
- 09:46:41 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t1) v HasTrack(p1, p2t1) to improve.
- 09:46:41 DEBUG: sentence true at :{[1:1], [26:27], [51:60]}
- 09:46:41 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 25), (2, 60)], [(26, 27), (28, 60)], [(28, 50), (28, 60)]}
- 09:46:41 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [26:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2322671
- 09:46:41 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:41 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2324040
- 09:46:41 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:41 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2325220
- 09:46:41 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:41 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2325634
- 09:46:41 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:41 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:41 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2325064
- 09:46:41 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:41 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:41 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2325963
- 09:46:41 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:41 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:46], [51:60]}
- 09:46:41 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-GateExit(p1t2) @ [47:50]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2326937
- 09:46:41 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:41 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:46:41 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2327924
- 09:46:41 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:41 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:41 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:41 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2305693
- 09:46:41 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:41 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:41 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Walking(p1) @ {[23:25]}

- 09:46:41 DEBUG: current score: 2330473
- 09:46:41 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:41 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:22], [26:60]}
- 09:46:41 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:46:41 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:46:41 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}

- 09:46:41 DEBUG: current score: 2331420
- 09:46:41 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:41 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:41 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}

- 09:46:41 DEBUG: current score: 2334532
- 09:46:41 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:41 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:41 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:41 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[6:60]}

- 09:46:41 DEBUG: current score: 2327616
- 09:46:41 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:41 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[6:60]}
- 09:46:41 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:41 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:5]}, toDel: {})
- 09:46:41 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:5]}, toDel: {}
- 09:46:41 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}

- 09:46:41 DEBUG: current score: 2334532
- 09:46:42 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:42 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}

- 09:46:42 DEBUG: current score: 2334390
- 09:46:42 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}

- 09:46:42 DEBUG: current score: 2334532
- 09:46:42 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}

- 09:46:42 DEBUG: current score: 2331420
- 09:46:42 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:42 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}

- 09:46:42 DEBUG: current score: 2334532
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:42 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:42 DEBUG: taking random move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
Walking(p1) @ {[2:18]}

- 09:46:42 DEBUG: current score: 2334774
- 09:46:42 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
Walking(p1) @ {[2:18]}

- 09:46:42 DEBUG: current score: 2333375
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:46:42 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2334322
- 09:46:42 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p2t2) @ {[1:60]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2325172
- 09:46:42 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:42 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2325030
- 09:46:42 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:42 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:42 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2334180
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:42 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:42 DEBUG: taking random move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2335189
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:42 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:42 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2310259
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:42 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:42 DEBUG: current score: 2305303
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:42 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:42 DEBUG: current score: 2305807
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:10], [16:60]}
- 09:46:42 DEBUG: choosing [11:15] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [11:15]}), (toAdd: {Driving(p2) @ [11:15]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [11:15]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[11:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:42 DEBUG: current score: 2306547
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:42 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:42 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:42 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:42 DEBUG: current score: 2306537
- 09:46:42 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:42 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:42 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:42 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25], [31:60]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2307527
- 09:46:43 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {[2:10], [26:30]}
- 09:46:43 DEBUG: choosing [31:60] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:60]}), (toAdd: {HasTrack(p2, p2t2) @ [31:60]}, toDel: {})
- 09:46:43 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:60]}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2298377
- 09:46:43 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:43 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:25]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2298182
- 09:46:43 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {[2:10], [26:60]}
- 09:46:43 DEBUG: choosing [11:25] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [11:25]}), (toAdd: {HasTrack(p2, p2t2) @ [11:25]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [11:25]}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2295187
- 09:46:43 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:43 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2296086
- 09:46:43 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:43 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:43 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2242494
- 09:46:43 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {[2:60]}
- 09:46:43 DEBUG: choosing [1:1] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:1]}), (toAdd: {HasTrack(p2, p2t2) @ [1:1]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:1]}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2279189
- 09:46:43 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:43 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:43 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2284025
- 09:46:43 DEBUG: choosing sentence: [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:43 DEBUG: sentence [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:1], [26:60]}
- 09:46:43 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:25]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]})
- 09:46:43 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:25]}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2298734
- 09:46:43 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:43 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:43 DEBUG: taking random move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2299979
- 09:46:43 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:43 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[1:1], [26:60]}
- 09:46:43 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [2:25]}, toDel: {})
- 09:46:43 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [2:25]}, toDel: {}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2285270
- 09:46:43 DEBUG: choosing sentence: [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] to improve.
- 09:46:43 DEBUG: sentence [ !HasTrack(p1, p1t1) v !HasTrack(p1, p2t1) v !D-Track(p1t1) v !D-Track(p2t1) ] satisfied at {[1:1], [26:60]}
- 09:46:43 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:25]}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]})
- 09:46:43 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]}
- 09:46:43 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:43 DEBUG: current score: 2311698
- 09:46:43 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:43 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:43 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:43 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:44 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2310299
- 09:46:44 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:44 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:44 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:44 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:44 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2310309
- 09:46:44 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:44 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:44 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[11:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2310114
- 09:46:44 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:44 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {Driving(p2) @ [2:10]}, toDel: {})
- 09:46:44 DEBUG: taking random move: toAdd: {Driving(p2) @ [2:10]}, toDel: {}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2310668
- 09:46:44 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:44 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:44 DEBUG: taking random move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2311642
- 09:46:44 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:44 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:44 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2298940
- 09:46:44 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:44 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:44 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:44 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2300185
- 09:46:44 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] satisfied at {[1:25], [31:60]}
- 09:46:44 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:30]}), (toAdd: {Walking(p1) @ [26:30]}, toDel: {})
- 09:46:44 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:30]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2297895
- 09:46:44 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:44 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:44 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:44 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2298885
- 09:46:44 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:44 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:44 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:44 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2284014
- 09:46:44 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] satisfied at {[1:49], [51:60]}
- 09:46:44 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {})
- 09:46:44 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2284564
- 09:46:44 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:44 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:44 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:46:44 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:46:44 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:44 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:44 DEBUG: current score: 2290158
- 09:46:44 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:44 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:44 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:44 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:44 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2294784
- 09:46:45 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] satisfied at {[2:30]}
- 09:46:45 DEBUG: choosing [1:1] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:1]}), (toAdd: {HasTrack(p1, p1t2) @ [1:1]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:1]}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2294793
- 09:46:45 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:45 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:45 DEBUG: taking random move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2295783
- 09:46:45 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] satisfied at {[1:30]}
- 09:46:45 DEBUG: choosing [31:60] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [31:60]}), (toAdd: {HasTrack(p1, p1t2) @ [31:60]}, toDel: {})
- 09:46:45 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [31:60]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2195329
- 09:46:45 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:45 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:46], [51:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2211675
- 09:46:45 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[31:46], [51:60]}
- 09:46:45 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [47:50]}), (toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [47:50]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2195329
- 09:46:45 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:45 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2205779
- 09:46:45 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:45 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2205388
- 09:46:45 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:45 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[31:34], [51:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2207218
- 09:46:45 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {[31:34], [51:60]}
- 09:46:45 DEBUG: choosing [1:30] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:30]}), (toAdd: {HasTrack(p1, p1t2) @ [1:30]}, toDel: {})
- 09:46:45 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:30]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:45 DEBUG: current score: 2217092
- 09:46:45 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:45 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:45 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:45 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:45 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:45 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[31:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:45 DEBUG: current score: 2218132
- 09:46:46 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:46 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[31:60]}
- 09:46:46 DEBUG: choosing [1:30] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:30]}), (toAdd: {HasTrack(p1, p2t1) @ [1:30]}, toDel: {})
- 09:46:46 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:30]}, toDel: {}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2192335
- 09:46:46 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:46 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:46 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [50:50]}), (toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {})
- 09:46:46 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2203885
- 09:46:46 DEBUG: choosing sentence: [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] to improve.
- 09:46:46 DEBUG: sentence [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] satisfied at {[1:27], [35:60]}
- 09:46:46 DEBUG: choosing [28:34] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:34]}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:34]})
- 09:46:46 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:34]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[1:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2223929
- 09:46:46 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] to improve.
- 09:46:46 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-Walking(p2t1) v Walking(p1) ] satisfied at {[1:25], [28:60]}
- 09:46:46 DEBUG: choosing [26:27] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [26:27]}), (toAdd: {Walking(p1) @ [26:27]}, toDel: {})
- 09:46:46 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [26:27]}, toDel: {}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[1:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2224873
- 09:46:46 DEBUG: choosing sentence: [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t1) v !D-Track(p2t1) v !D-Track(p1t1) ] to improve.
- 09:46:46 DEBUG: sentence [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t1) v !D-Track(p2t1) v !D-Track(p1t1) ] satisfied at {[1:1], [26:60]}
- 09:46:46 DEBUG: choosing [2:25] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:25]})
- 09:46:46 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:25]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:34], [51:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2267952
- 09:46:46 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t2) v HasTrack(p1, p1t2) to improve.
- 09:46:46 DEBUG: sentence true at :{[1:34], [51:60]}
- 09:46:46 DEBUG: sentence NOT true at :{[(1, 34), (35, 60)], [(35, 50), (35, 60)]}
- 09:46:46 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [35:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]})
- 09:46:46 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2294115
- 09:46:46 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:46 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:46 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:46 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:46 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:46 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]})
- 09:46:46 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2294665
- 09:46:46 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:46 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:46 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:46 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:46 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2294230
- 09:46:46 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:46 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:46 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:46 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:46 DEBUG: taking random move: toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:27], [35:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2292166
- 09:46:46 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:46 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[1:1], [26:27], [35:60]}
- 09:46:46 DEBUG: choosing [28:34] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [28:34]}), (toAdd: {HasTrack(p1, p2t1) @ [28:34]}, toDel: {})
- 09:46:46 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t1) @ [28:34]}, toDel: {}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:46 DEBUG: current score: 2296817
- 09:46:46 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:46 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:46 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:46 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:46 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:46:46 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2285267
- 09:46:47 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:3]}
- 09:46:47 DEBUG: choosing [4:60] as the interval to satisfy
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [4:60], D-ElevatorExit(p2t2) @ [4:60]}, toDel: {}
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [4:60]})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [4:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2287331
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:47 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [50:50]}), (toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {})
- 09:46:47 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2298881
- 09:46:47 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t1) v HasTrack(p1, p2t1) to improve.
- 09:46:47 DEBUG: sentence true at :{[1:1], [26:60]}
- 09:46:47 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 25), (2, 60)]}
- 09:46:47 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]})
- 09:46:47 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2325048
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:47 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2324992
- 09:46:47 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:47 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2326001
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:47 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2321771
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:47 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2314727
- 09:46:47 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:46:47 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:46:47 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2327261
- 09:46:47 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:47 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:47 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[6:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2319912
- 09:46:47 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) to improve.
- 09:46:47 DEBUG: sentence true at :{[6:60]}
- 09:46:47 DEBUG: sentence NOT true at :{[(1, 5), (1, 60)]}
- 09:46:47 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]})
- 09:46:47 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2327261
- 09:46:47 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [28:51]}
- 09:46:47 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2327522
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:47 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2331752
- 09:46:47 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:47 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:47 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:47 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:47 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27]}
Walking(p2) @ {[26:30]}

- 09:46:47 DEBUG: current score: 2331043
- 09:46:47 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:47 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:47 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:47 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:47 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:47 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2332052
- 09:46:48 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:48 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:48 DEBUG: taking random move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:27], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2332556
- 09:46:48 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [28:60]}
- 09:46:48 DEBUG: choosing [26:27] as the interval to satisfy
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [26:27], D-Walking(p1t1) @ [26:27]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [26:27], D-Walking(p2t1) @ [26:27]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [26:27], D-Walking(p2t2) @ [26:27]}, toDel: {}
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [26:27]})
- 09:46:48 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [26:27]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2333500
- 09:46:48 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:48 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:48 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:48 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2333695
- 09:46:48 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:48 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:48 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2334685
- 09:46:48 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:48 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2335235
- 09:46:48 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:48 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2335040
- 09:46:48 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:48 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:48 DEBUG: current score: 2335030
- 09:46:48 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:48 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:48 DEBUG: current score: 2336070
- 09:46:48 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:48 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:48 DEBUG: current score: 2334671
- 09:46:48 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:46:48 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2335175
- 09:46:48 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:48 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:48 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:48 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2336060
- 09:46:48 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:48 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:48 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:48 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2336610
- 09:46:48 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:48 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2335211
- 09:46:48 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:48 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2336610
- 09:46:48 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:48 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:48 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:48 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:48 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:46:48 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:48 DEBUG: current score: 2332380
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:46:49 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2333367
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:46:49 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:46:49 DEBUG: taking random move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2310947
- 09:46:49 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:49 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:49 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2310805
- 09:46:49 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:49 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2299277
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:46:49 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2324246
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:49 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2309160
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:49 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2326049
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:49 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:49 DEBUG: current score: 2327294
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:49 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:49 DEBUG: current score: 2328334
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:46:49 DEBUG: choosing [47:50] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:46:49 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:49 DEBUG: current score: 2329248
- 09:46:49 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:49 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:49 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:49 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:49 DEBUG: current score: 2330147
- 09:46:49 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:49 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:49 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:49 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:49 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:49 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:49 DEBUG: current score: 2330389
- 09:46:49 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:49 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:49 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:49 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2331379
- 09:46:50 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:50 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:50 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2329980
- 09:46:50 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:50 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:50 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:54]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2323122
- 09:46:50 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {[55:60]}
- 09:46:50 DEBUG: choosing [1:54] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:54]}), (toAdd: {HasTrack(p2, p1t1) @ [1:54]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:54]}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2331379
- 09:46:50 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:50 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:50 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2339941
- 09:46:50 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:50 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2340840
- 09:46:50 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:46:50 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:46:50 DEBUG: taking random move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:46:50 DEBUG: remembering this model as best scoring so far
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2341766
- 09:46:50 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:50 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2330238
- 09:46:50 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:50 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:46:50 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:50 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:50 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:50 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:50 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2331137
- 09:46:50 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:50 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2329738
- 09:46:50 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:46:50 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[6:60]}
- 09:46:50 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:50 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:5], D-ElevatorEnter(p1t1) @ [1:5]}, toDel: {}
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:50 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:50 DEBUG: current score: 2329828
- 09:46:50 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:50 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:50 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:50 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:50 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:50 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:51 DEBUG: current score: 2329482
- 09:46:51 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:51 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:51 DEBUG: current score: 2330607
- 09:46:51 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:51 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:51 DEBUG: current score: 2330037
- 09:46:51 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:51 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:51 DEBUG: current score: 2315255
- 09:46:51 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:51 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:51 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:51 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2316295
- 09:46:51 DEBUG: choosing sentence: !GateExit(p1) v <>{<} ElevatorEnter(p1) to improve.
- 09:46:51 DEBUG: sentence true at :{[(1, 46), (1, 60)], [(47, 50), (51, 60)], [51:60]}
- 09:46:51 DEBUG: sentence NOT true at :{[47:50]}
- 09:46:51 DEBUG: moves to consider: (toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}), (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:46:51 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2317269
- 09:46:51 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:51 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:51 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2322759
- 09:46:51 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:46:51 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:46:51 DEBUG: choosing [35:50] as the interval to satisfy
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:46:51 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2323939
- 09:46:51 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:51 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:51 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2323929
- 09:46:51 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:51 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:51 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2336631
- 09:46:51 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:51 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:46:51 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:51 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:46:51 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:51 DEBUG: current score: 2337618
- 09:46:51 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:51 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:51 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:51 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:51 DEBUG: current score: 2338658
- 09:46:51 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] to improve.
- 09:46:51 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] satisfied at {[1:49], [51:60]}
- 09:46:51 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:51 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {})
- 09:46:52 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2339208
- 09:46:52 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:52 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:52 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2338817
- 09:46:52 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:52 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:52 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2338382
- 09:46:52 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:46:52 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:46:52 DEBUG: sentence NOT true at :{[2:10]}
- 09:46:52 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:52 DEBUG: taking random move: toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2316238
- 09:46:52 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:52 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:52 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:52 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2316305
- 09:46:52 DEBUG: choosing sentence: [ !InCar(p2) v !ElevatorEnter(p2) ^ !ElevatorExit(p2) ] to improve.
- 09:46:52 DEBUG: sentence [ !InCar(p2) v !ElevatorEnter(p2) ^ !ElevatorExit(p2) ] satisfied at {[1:3], [21:60]}
- 09:46:52 DEBUG: choosing [4:20] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [4:20]}), (toAdd: {}, toDel: {ElevatorEnter(p2) @ [4:20], ElevatorExit(p2) @ [4:20]})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p2) @ [4:20], ElevatorExit(p2) @ [4:20]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2336929
- 09:46:52 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:52 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:52 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:52 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2335530
- 09:46:52 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:52 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:52 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2320748
- 09:46:52 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:52 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:52 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2321993
- 09:46:52 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:52 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:52 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:52 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:51]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2312303
- 09:46:52 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:52 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:52 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:52 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:52 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:51]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:52 DEBUG: current score: 2313293
- 09:46:52 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:52 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:52 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:52 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:52 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:53 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:51]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:53 DEBUG: current score: 2298422
- 09:46:53 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t2) v HasTrack(p1, p2t2) to improve.
- 09:46:53 DEBUG: sentence true at :{[1:51]}
- 09:46:53 DEBUG: sentence NOT true at :{[(1, 51), (52, 60)], [52:60]}
- 09:46:53 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [52:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]})
- 09:46:53 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:53 DEBUG: current score: 2309511
- 09:46:53 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:53 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:53 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:53 DEBUG: current score: 2308112
- 09:46:53 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:53 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:53 DEBUG: current score: 2298382
- 09:46:53 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:46:53 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:53 DEBUG: current score: 2298932
- 09:46:53 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:53 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:53 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:53 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2299972
- 09:46:53 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:53 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2303565
- 09:46:53 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:53 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:28], [51:60]}
- 09:46:53 DEBUG: choosing [29:50] as the interval to satisfy
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [29:50], D-InCar(p1t2) @ [29:50]}, toDel: {}
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [29:50], D-InCar(p2t1) @ [29:50]}, toDel: {}
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:50]})
- 09:46:53 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [29:50]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2304934
- 09:46:53 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:53 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:53 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2314664
- 09:46:53 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:46:53 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:46:53 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:53 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:53 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2298818
- 09:46:53 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:53 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2298623
- 09:46:53 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:53 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:53 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:46:53 DEBUG: current score: 2300069
- 09:46:53 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:53 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:53 DEBUG: current score: 2300573
- 09:46:53 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:53 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:53 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:53 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:15]}, toDel: {}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:53 DEBUG: current score: 2316572
- 09:46:53 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:53 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:53 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:53 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:53 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}
- 09:46:53 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2292842
- 09:46:54 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:54 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2293741
- 09:46:54 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t1) v HasTrack(p2, p2t1) to improve.
- 09:46:54 DEBUG: sentence true at :{[1:20], [26:60]}
- 09:46:54 DEBUG: sentence NOT true at :{[(1, 20), (21, 60)], [(21, 25), (21, 60)]}
- 09:46:54 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [21:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]})
- 09:46:54 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[21:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2317471
- 09:46:54 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:46:54 DEBUG: sentence true at :{[(1, 20), (1, 60)]}
- 09:46:54 DEBUG: sentence NOT true at :{[21:60]}
- 09:46:54 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [21:60]})
- 09:46:54 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [21:60]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2336291
- 09:46:54 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:54 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2337536
- 09:46:54 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:54 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:54 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:54 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:54 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:54 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]})
- 09:46:54 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2338086
- 09:46:54 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:54 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:54 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:54 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:54 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2338096
- 09:46:54 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:15], [21:60]}
- 09:46:54 DEBUG: choosing [16:20] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [16:20]}), (toAdd: {InCar(p2) @ [16:20]}, toDel: {})
- 09:46:54 DEBUG: taking random move: toAdd: {InCar(p2) @ [16:20]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2338986
- 09:46:54 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:54 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:54 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2337587
- 09:46:54 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:54 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2338577
- 09:46:54 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:54 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:46:54 DEBUG: current score: 2339976
- 09:46:54 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:54 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:54 DEBUG: taking random move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:54 DEBUG: current score: 2341016
- 09:46:54 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:54 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:54 DEBUG: current score: 2330068
- 09:46:54 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:54 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:54 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:54 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:54 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:54 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2332796
- 09:46:55 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:51]}
- 09:46:55 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2333075
- 09:46:55 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:55 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:55 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2332729
- 09:46:55 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:46:55 DEBUG: choosing [23:25] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2332992
- 09:46:55 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:55 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2333877
- 09:46:55 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:49], [51:60]}
- 09:46:55 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2334534
- 09:46:55 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:60]}
- 09:46:55 DEBUG: choosing [2:18] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2335460
- 09:46:55 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:55 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[26:30]}

- 09:46:55 DEBUG: current score: 2324338
- 09:46:55 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:55 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2325378
- 09:46:55 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:46:55 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2325928
- 09:46:55 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:55 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:55 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2334970
- 09:46:55 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:55 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2325928
- 09:46:55 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:55 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:55 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
InCar(p2) @ {[2:20]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2326918
- 09:46:55 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:55 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:55 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:55 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2312047
- 09:46:55 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:55 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:55 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p2) @ {[31:45]}

- 09:46:55 DEBUG: current score: 2315159
- 09:46:55 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:46:55 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:46:55 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:46:55 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:46:55 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}

- 09:46:55 DEBUG: current score: 2316404
- 09:46:55 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:55 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:55 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:55 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:55 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}

- 09:46:55 DEBUG: current score: 2318958
- 09:46:55 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:55 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:55 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:55 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2319998
- 09:46:56 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:46:56 DEBUG: choosing [20:22] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2320897
- 09:46:56 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2315987
- 09:46:56 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:46:56 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2320897
- 09:46:56 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2316263
- 09:46:56 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:56 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:56 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:56 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2317303
- 09:46:56 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:56 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:56 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:15]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2332389
- 09:46:56 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:46:56 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:46:56 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:46:56 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2333843
- 09:46:56 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:56 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2333833
- 09:46:56 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:15]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2332434
- 09:46:56 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:56 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:46:56 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-InCar(p1t2) @ [2:15]}, toDel: {}
- 09:46:56 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-InCar(p2t1) @ [2:15]}, toDel: {}
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:15]})
- 09:46:56 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:15]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2317348
- 09:46:56 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:56 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2317153
- 09:46:56 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:46:56 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:46:56 DEBUG: choosing [2:15] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2333827
- 09:46:56 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2334536
- 09:46:56 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2333827
- 09:46:56 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:56 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:56 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:56 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:56 DEBUG: current score: 2333685
- 09:46:56 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:56 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:56 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:56 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:56 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:56 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:56 DEBUG: current score: 2334725
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p2) @ {[26:30]}

- 09:46:57 DEBUG: current score: 2332787
- 09:46:57 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:46:57 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:46:57 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:57 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:46:57 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:46:57 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:46:57 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}

- 09:46:57 DEBUG: current score: 2333827
- 09:46:57 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:46:57 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2334331
- 09:46:57 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:46:57 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:46:57 DEBUG: sentence NOT true at :{[55:60]}
- 09:46:57 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:57 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2334526
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2325376
- 09:46:57 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:57 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2325234
- 09:46:57 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:46:57 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2326243
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p1t1) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2335393
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2335784
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2335393
- 09:46:57 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2333517
- 09:46:57 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:46:57 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2333322
- 09:46:57 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:46:57 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:46:57 DEBUG: choosing [2:20] as the interval to satisfy
- 09:46:57 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:46:57 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:46:57 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2334331
- 09:46:57 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:57 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:46:57 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2334189
- 09:46:57 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:46:57 DEBUG: choosing [2:10] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:46:57 DEBUG: taking random move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}

- 09:46:57 DEBUG: current score: 2322763
- 09:46:57 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:46:57 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:46:57 DEBUG: choosing [26:30] as the interval to satisfy
- 09:46:57 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:46:57 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:46:57 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:57 DEBUG: current score: 2323803
- 09:46:58 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:58 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:58 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:58 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:58 DEBUG: taking random move: toAdd: {GateExit(p1) @ [3:60]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2284576
- 09:46:58 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:46:58 DEBUG: choosing [31:45] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2285821
- 09:46:58 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:46:58 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2284422
- 09:46:58 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:46:58 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:2]}
- 09:46:58 DEBUG: choosing [3:60] as the interval to satisfy
- 09:46:58 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [3:60], D-GateExit(p1t2) @ [3:60]}, toDel: {}
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [3:60]})
- 09:46:58 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [3:60]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2323649
- 09:46:58 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p2) ] satisfied at {[1:49], [51:60]}
- 09:46:58 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [50:50]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2324199
- 09:46:58 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:46:58 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:46:58 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2244689
- 09:46:58 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] satisfied at {[1:27], [31:60]}
- 09:46:58 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p2) @ [28:30]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [28:30]}, toDel: {}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2245676
- 09:46:58 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:46:58 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:46:58 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2219936
- 09:46:58 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:46:58 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:46:58 DEBUG: sentence NOT true at :{[1:5]}
- 09:46:58 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:46:58 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2219946
- 09:46:58 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:58 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [46:60]}
- 09:46:58 DEBUG: choosing [28:45] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:45]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:45]})
- 09:46:58 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:45]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:27], [46:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2257305
- 09:46:58 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:46:58 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:27], [46:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2257006
- 09:46:58 DEBUG: choosing sentence: [ !HasTrack(p2, p2t2) v !HasTrack(p2, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] to improve.
- 09:46:58 DEBUG: sentence [ !HasTrack(p2, p2t2) v !HasTrack(p2, p1t2) v !D-Track(p2t2) v !D-Track(p1t2) ] satisfied at {[1:49], [51:60]}
- 09:46:58 DEBUG: choosing [50:50] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [50:50]}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [50:50]})
- 09:46:58 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [50:50]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:27], [46:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2267490
- 09:46:58 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:46:58 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {[1:20], [26:27], [46:60]}
- 09:46:58 DEBUG: choosing [28:45] as the interval to satisfy
- 09:46:58 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [28:45]}), (toAdd: {HasTrack(p2, p2t1) @ [28:45]}, toDel: {})
- 09:46:58 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [28:45]}
- 09:46:58 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:27], [46:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:58 DEBUG: current score: 2241528
- 09:46:59 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] to improve.
- 09:46:59 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] satisfied at {[1:34], [50:60]}
- 09:46:59 DEBUG: choosing [35:49] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [35:49]}), (toAdd: {Driving(p2) @ [35:49]}, toDel: {})
- 09:46:59 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [35:49]}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:27], [46:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:59 DEBUG: current score: 2231241
- 09:46:59 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:59 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {[1:20], [26:27], [46:60]}
- 09:46:59 DEBUG: choosing [28:45] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [28:45]}, toDel: {})
- 09:46:59 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [28:45]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:59 DEBUG: current score: 2200612
- 09:46:59 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:46:59 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:46:59 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:46:59 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:34], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:59 DEBUG: current score: 2201737
- 09:46:59 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:46:59 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [35:60]}
- 09:46:59 DEBUG: choosing [28:34] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:34]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:34]})
- 09:46:59 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:34]}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30]}

- 09:46:59 DEBUG: current score: 2241446
- 09:46:59 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:46:59 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:46:59 DEBUG: choosing [52:60] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:46:59 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2241950
- 09:46:59 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:46:59 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:46:59 DEBUG: choosing [55:60] as the interval to satisfy
- 09:46:59 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:46:59 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2242835
- 09:46:59 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:46:59 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:46:59 DEBUG: choosing [1:5] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:46:59 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2242825
- 09:46:59 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:46:59 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:46:59 DEBUG: choosing [28:30] as the interval to satisfy
- 09:46:59 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:46:59 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [28:30]})
- 09:46:59 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [28:30]}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:27], [46:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2243812
- 09:46:59 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t2) v HasTrack(p2, p2t2) to improve.
- 09:46:59 DEBUG: sentence true at :{[1:27], [46:60]}
- 09:46:59 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [(28, 45), (28, 60)]}
- 09:46:59 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]})
- 09:46:59 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:20], [26:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2271613
- 09:46:59 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:46:59 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {[1:20], [26:60]}
- 09:46:59 DEBUG: choosing [21:25] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [21:25]}, toDel: {})
- 09:46:59 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [21:25]}, toDel: {}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2297353
- 09:46:59 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:46:59 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:46:59 DEBUG: choosing [1:60] as the interval to satisfy
- 09:46:59 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:46:59 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:46:59 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:46:59 DEBUG: current score: 2295954
- 09:47:00 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:47:00 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:47:00 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:00 DEBUG: current score: 2296944
- 09:47:00 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:47:00 DEBUG: choosing [2:18] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:47:00 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:00 DEBUG: current score: 2297186
- 09:47:00 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:00 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:00 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:00 DEBUG: current score: 2288448
- 09:47:00 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:51]}
- 09:47:00 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:47:00 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2289218
- 09:47:00 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:47:00 DEBUG: sentence true at :{[1:27], [51:60]}
- 09:47:00 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [(28, 50), (28, 60)]}
- 09:47:00 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:47:00 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2320266
- 09:47:00 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:47:00 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:47:00 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:00 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2331480
- 09:47:00 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:00 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:00 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2327250
- 09:47:00 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:49], [51:60]}
- 09:47:00 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:47:00 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2328000
- 09:47:00 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:47:00 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]})
- 09:47:00 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p2) @ [50:50]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2328550
- 09:47:00 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:47:00 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:47:00 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2306130
- 09:47:00 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:00 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:00 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:00 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:00 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2306634
- 09:47:00 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:00 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:00 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2308504
- 09:47:00 DEBUG: choosing sentence: [ !Driving(p1) v InCar(p1) ] to improve.
- 09:47:00 DEBUG: sentence [ !Driving(p1) v InCar(p1) ] satisfied at {[1:34], [51:60]}
- 09:47:00 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]}), (toAdd: {InCar(p1) @ [35:50]}, toDel: {})
- 09:47:00 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2333284
- 09:47:00 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:00 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:47:00 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:00 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2334231
- 09:47:00 DEBUG: choosing sentence: !ElevatorExit(p2) v <>{<} GateEnter(p2) to improve.
- 09:47:00 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:47:00 DEBUG: sentence NOT true at :{[55:60]}
- 09:47:00 DEBUG: moves to consider: (toAdd: {GateEnter(p2) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:47:00 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:47:00 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:00 DEBUG: current score: 2335116
- 09:47:00 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:00 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:00 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:00 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:00 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:01 DEBUG: current score: 2336954
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:47:01 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:47:01 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [21:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:01 DEBUG: current score: 2314466
- 09:47:01 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:01 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {[1:1], [21:60]}
- 09:47:01 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [2:20]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [2:20]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:01 DEBUG: current score: 2336954
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:47:01 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2337994
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:47:01 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2339003
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:01 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:01 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2325297
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:01 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2326542
- 09:47:01 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:01 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:01 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:01 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:01 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1], [11:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2326552
- 09:47:01 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[2:10]}
- 09:47:01 DEBUG: choosing [11:60] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [11:60]}), (toAdd: {HasTrack(p2, p1t2) @ [11:60]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [11:60]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2295407
- 09:47:01 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:01 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:47:01 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:47:01 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:1]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2296652
- 09:47:01 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t1) v HasTrack(p2, p2t1) to improve.
- 09:47:01 DEBUG: sentence true at :{[1:1]}
- 09:47:01 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [2:60]}
- 09:47:01 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]})
- 09:47:01 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2339013
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:01 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2339003
- 09:47:01 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:01 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:01 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:30], [46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2309363
- 09:47:01 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {[31:45]}
- 09:47:01 DEBUG: choosing [1:30] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:30]}), (toAdd: {HasTrack(p2, p2t2) @ [1:30]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:30]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:01 DEBUG: current score: 2298147
- 09:47:01 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:01 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:51]}
- 09:47:01 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:47:01 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:47:01 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:47:01 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:01 DEBUG: current score: 2298917
- 09:47:01 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:01 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:01 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:01 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:01 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:02 DEBUG: current score: 2297518
- 09:47:02 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:02 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[52:60]}

- 09:47:02 DEBUG: current score: 2297323
- 09:47:02 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:02 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:02 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:47:02 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[46:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2297827
- 09:47:02 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {[46:60]}
- 09:47:02 DEBUG: choosing [1:45] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:45]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:45]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2336873
- 09:47:02 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2337582
- 09:47:02 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2333726
- 09:47:02 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:02 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:47:02 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2334611
- 09:47:02 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:47:02 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:47:02 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335620
- 09:47:02 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:47:02 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:47:02 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2336610
- 09:47:02 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335211
- 09:47:02 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2336610
- 09:47:02 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:02 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:02 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:02 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:02 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2336620
- 09:47:02 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335221
- 09:47:02 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:02 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335211
- 09:47:02 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:02 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:02 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:02 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:02 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335221
- 09:47:02 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:02 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:02 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:02 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:02 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:02 DEBUG: current score: 2335079
- 09:47:02 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:47:02 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:47:02 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:02 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2335583
- 09:47:03 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2335974
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:03 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2324548
- 09:47:03 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:03 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:03 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:03 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:03 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2335974
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:47:03 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2336964
- 09:47:03 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:03 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2332734
- 09:47:03 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:03 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:03 DEBUG: current score: 2322011
- 09:47:03 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:03 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:51]}
- 09:47:03 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:47:03 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:03 DEBUG: current score: 2322211
- 09:47:03 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:03 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:03 DEBUG: current score: 2320373
- 09:47:03 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:03 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:51]}
- 09:47:03 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:03 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:03 DEBUG: current score: 2320715
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:47:03 DEBUG: choosing [29:50] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:03 DEBUG: current score: 2322084
- 09:47:03 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:03 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:03 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:03 DEBUG: current score: 2331822
- 09:47:03 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:47:03 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:47:03 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:47:03 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:47:03 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:03 DEBUG: current score: 2332812
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:47:03 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:03 DEBUG: current score: 2333992
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:47:03 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:03 DEBUG: current score: 2334939
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:03 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:03 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:03 DEBUG: current score: 2334929
- 09:47:03 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:47:03 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:47:03 DEBUG: choosing [28:30] as the interval to satisfy
- 09:47:03 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:47:03 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:47:03 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:04 DEBUG: current score: 2335916
- 09:47:04 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:47:04 DEBUG: choosing [47:50] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:04 DEBUG: current score: 2336830
- 09:47:04 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:04 DEBUG: current score: 2325302
- 09:47:04 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:47:04 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:04 DEBUG: current score: 2325565
- 09:47:04 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:60]}
- 09:47:04 DEBUG: choosing [2:18] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [2:18], D-Walking(p1t1) @ [2:18]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [2:18], D-Walking(p2t1) @ [2:18]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [2:18], D-Walking(p2t2) @ [2:18]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [2:18]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [2:18]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}

- 09:47:04 DEBUG: current score: 2326491
- 09:47:04 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:47:04 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2327390
- 09:47:04 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:04 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2334742
- 09:47:04 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2327390
- 09:47:04 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:47:04 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[6:60]}
- 09:47:04 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:5], D-ElevatorEnter(p1t1) @ [1:5]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2327480
- 09:47:04 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2268568
- 09:47:04 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-GateEnter(p2t1) v GateEnter(p1) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p1, p2t1) v !D-GateEnter(p2t1) v GateEnter(p1) ] satisfied at {[1:1], [11:60]}
- 09:47:04 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:10]}), (toAdd: {GateEnter(p1) @ [2:10]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [2:10]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:1], [11:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2257641
- 09:47:04 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:1], [11:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2307290
- 09:47:04 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t1) v HasTrack(p1, p2t1) to improve.
- 09:47:04 DEBUG: sentence true at :{[1:1], [11:60]}
- 09:47:04 DEBUG: sentence NOT true at :{[(1, 1), (2, 60)], [(2, 10), (2, 60)]}
- 09:47:04 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [2:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
GateExit(p1) @ {[47:50]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2326910
- 09:47:04 DEBUG: choosing sentence: !GateExit(p1) v <>{<} ElevatorEnter(p1) to improve.
- 09:47:04 DEBUG: sentence true at :{[(1, 46), (1, 60)], [(47, 50), (51, 60)], [51:60]}
- 09:47:04 DEBUG: sentence NOT true at :{[47:50]}
- 09:47:04 DEBUG: moves to consider: (toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}), (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:47:04 DEBUG: taking random move: toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
GateExit(p1) @ {[47:50]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2298438
- 09:47:04 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:47:04 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:47:04 DEBUG: choosing [28:30] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
GateExit(p1) @ {[47:50]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2299425
- 09:47:04 DEBUG: choosing sentence: [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] to improve.
- 09:47:04 DEBUG: sentence [ !GateExit(p1) v HasTrack(p1, p1t2) ^ D-GateExit(p1t2) ] satisfied at {[1:46], [51:60]}
- 09:47:04 DEBUG: choosing [47:50] as the interval to satisfy
- 09:47:04 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [47:50], D-GateExit(p1t2) @ [47:50]}, toDel: {}
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:47:04 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2276679
- 09:47:04 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:04 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:04 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:04 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:04 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:04 DEBUG: current score: 2276537
- 09:47:04 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:04 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:04 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:04 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}

- 09:47:05 DEBUG: current score: 2261451
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:05 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:47:05 DEBUG: current score: 2262696
- 09:47:05 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:47:05 DEBUG: current score: 2261297
- 09:47:05 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:47:05 DEBUG: current score: 2253701
- 09:47:05 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:05 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:47:05 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:47:05 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:47:05 DEBUG: current score: 2270375
- 09:47:05 DEBUG: choosing sentence: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] to improve.
- 09:47:05 DEBUG: sentence [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] satisfied at {[1:28], [49:60]}
- 09:47:05 DEBUG: choosing [29:48] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [29:48]}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [29:48], ElevatorExit(p1) @ [29:48]})
- 09:47:05 DEBUG: taking random move: toAdd: {}, toDel: {InCar(p1) @ [29:48]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}

- 09:47:05 DEBUG: current score: 2274925
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:47:05 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorEnter(p1) @ {[1:48]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2275429
- 09:47:05 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:47:05 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[49:60]}
- 09:47:05 DEBUG: choosing [1:48] as the interval to satisfy
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:48], D-ElevatorEnter(p1t1) @ [1:48]}, toDel: {}
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:48]})
- 09:47:05 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:48]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2300701
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p2) ] satisfied at {[1:54]}
- 09:47:05 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {ElevatorExit(p2) @ [55:60]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2300506
- 09:47:05 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2306514
- 09:47:05 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:05 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:05 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[49:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2309626
- 09:47:05 DEBUG: choosing sentence: [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:47:05 DEBUG: sentence [ !InCar(p1) v HasTrack(p1, p1t2) ^ D-InCar(p1t2) v HasTrack(p1, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:48], [51:60]}
- 09:47:05 DEBUG: choosing [49:50] as the interval to satisfy
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [49:50], D-InCar(p1t2) @ [49:50]}, toDel: {}
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [49:50], D-InCar(p2t1) @ [49:50]}, toDel: {}
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p1) @ [49:50]})
- 09:47:05 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p1) @ [49:50]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2309765
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:47:05 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2310664
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:05 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2295578
- 09:47:05 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:05 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:05 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:05 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:05 DEBUG: current score: 2296552
- 09:47:05 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:05 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:47:05 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:50], D-Driving(p1t2) @ [35:50]}, toDel: {}
- 09:47:05 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:50], D-Driving(p2t1) @ [35:50]}, toDel: {}
- 09:47:05 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:50]})
- 09:47:05 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:50]}
- 09:47:05 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2321332
- 09:47:06 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:47:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:47:06 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2321033
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:06 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2321023
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:47:06 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2322013
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:47:06 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2322276
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:47:06 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p2) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2339165
- 09:47:06 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:06 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:47:06 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:06 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]})
- 09:47:06 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p2) @ [55:60]}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2338730
- 09:47:06 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2337331
- 09:47:06 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[52:60]}

- 09:47:06 DEBUG: current score: 2338730
- 09:47:06 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:06 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:06 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:06 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:06 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:06 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:47:06 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:47:06 DEBUG: current score: 2339234
- 09:47:06 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:47:06 DEBUG: current score: 2337835
- 09:47:06 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:06 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}

- 09:47:06 DEBUG: current score: 2336436
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:47:06 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:47:06 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:47:06 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:47:06 DEBUG: current score: 2337476
- 09:47:06 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:47:06 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:47:06 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:06 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:47:06 DEBUG: taking random move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2338026
- 09:47:07 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p2, p2t2) v !D-Walking(p2t2) v Walking(p2) ] satisfied at {[1:51]}
- 09:47:07 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [52:60]}), (toAdd: {Walking(p2) @ [52:60]}, toDel: {})
- 09:47:07 DEBUG: taking random move: toAdd: {Walking(p2) @ [52:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:07 DEBUG: current score: 2338530
- 09:47:07 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:47:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:47:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:07 DEBUG: current score: 2338921
- 09:47:07 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:1], [19:60]}
- 09:47:07 DEBUG: choosing [2:18] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [2:18]}), (toAdd: {Walking(p1) @ [2:18]}, toDel: {})
- 09:47:07 DEBUG: taking random move: toAdd: {Walking(p1) @ [2:18]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30], [52:60]}

- 09:47:07 DEBUG: current score: 2339847
- 09:47:07 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:07 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:07 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [52:60]})
- 09:47:07 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [52:60]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2340351
- 09:47:07 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:47:07 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:47:07 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2340855
- 09:47:07 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:07 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:07 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:07 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:07 DEBUG: taking random move: toAdd: {GateExit(p1) @ [3:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2301628
- 09:47:07 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2290100
- 09:47:07 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:07 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:47:07 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:47:07 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:47:07 DEBUG: taking random move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2290999
- 09:47:07 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:07 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:07 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2290804
- 09:47:07 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:07 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[3:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2293290
- 09:47:07 DEBUG: choosing sentence: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] to improve.
- 09:47:07 DEBUG: sentence [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] satisfied at {[1:2]}
- 09:47:07 DEBUG: choosing [3:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {Driving(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p1) @ [3:60], GateExit(p1) @ [3:60]})
- 09:47:07 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p1) @ [3:60], GateExit(p1) @ [3:60]}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2332517
- 09:47:07 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:07 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:07 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:07 DEBUG: current score: 2338362
- 09:47:07 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:07 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:07 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:07 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:07 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:07 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2339761
- 09:47:08 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:08 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:08 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:08 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2339771
- 09:47:08 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:08 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:08 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:08 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2340117
- 09:47:08 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2330967
- 09:47:08 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:08 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:47:08 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:47:08 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2331230
- 09:47:08 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2321216
- 09:47:08 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:08 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2329156
- 09:47:08 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:47:08 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:47:08 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2314285
- 09:47:08 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:47:08 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2315184
- 09:47:08 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:08 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:47:08 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2331858
- 09:47:08 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:08 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:47:08 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:08 DEBUG: current score: 2333103
- 09:47:08 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:08 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:47:08 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:47:08 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:47:08 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:08 DEBUG: current score: 2334143
- 09:47:08 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:47:08 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:47:08 DEBUG: sentence NOT true at :{[55:60]}
- 09:47:08 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:08 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:08 DEBUG: current score: 2334338
- 09:47:08 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:08 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:08 DEBUG: current score: 2334328
- 09:47:08 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:08 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:08 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:08 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:08 DEBUG: current score: 2334133
- 09:47:08 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:08 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:08 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:08 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2332734
- 09:47:09 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:09 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:09 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:09 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2332744
- 09:47:09 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:09 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2327070
- 09:47:09 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:09 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2328908
- 09:47:09 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:09 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:47:09 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2329793
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:09 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2314707
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:09 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:09 DEBUG: taking random move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}

- 09:47:09 DEBUG: current score: 2314361
- 09:47:09 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:09 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:51]}
- 09:47:09 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:09 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}

- 09:47:09 DEBUG: current score: 2314703
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:09 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:09 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:30], [46:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}

- 09:47:09 DEBUG: current score: 2285063
- 09:47:09 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:09 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:09 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:30], [46:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}

- 09:47:09 DEBUG: current score: 2290899
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:47:09 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:30], [46:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2291939
- 09:47:09 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:09 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:30], [46:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2291640
- 09:47:09 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p2t1) v HasTrack(p2, p2t1) to improve.
- 09:47:09 DEBUG: sentence true at :{[1:30], [46:60]}
- 09:47:09 DEBUG: sentence NOT true at :{[(1, 30), (31, 60)], [(31, 45), (31, 60)]}
- 09:47:09 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t1) @ [31:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]})
- 09:47:09 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2314666
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:09 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:09 DEBUG: taking random move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2314471
- 09:47:09 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:47:09 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:47:09 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2314975
- 09:47:09 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:09 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:09 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:09 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:09 DEBUG: current score: 2316429
- 09:47:09 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:47:09 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:09 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:09 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:47:09 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:47:09 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2333103
- 09:47:10 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:10 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2333093
- 09:47:10 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:10 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2337011
- 09:47:10 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2333093
- 09:47:10 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2322775
- 09:47:10 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:10 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2333093
- 09:47:10 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:47:10 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:10 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:22], [26:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2309424
- 09:47:10 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:10 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[1:22], [26:60]}
- 09:47:10 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [23:25]}, toDel: {})
- 09:47:10 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [23:25]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2333093
- 09:47:10 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:10 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2337011
- 09:47:10 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:47:10 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:47:10 DEBUG: sentence NOT true at :{[55:60]}
- 09:47:10 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:10 DEBUG: taking random move: toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2299064
- 09:47:10 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:10 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2287638
- 09:47:10 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:47:10 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:10 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [2:10]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]})
- 09:47:10 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2299064
- 09:47:10 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:10 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2297665
- 09:47:10 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:10 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:47:10 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:47:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:47:10 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:47:10 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2298215
- 09:47:10 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:10 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:10 DEBUG: taking random move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:10 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:10 DEBUG: current score: 2283129
- 09:47:10 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:10 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:47:10 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:10 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:10 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2284076
- 09:47:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:47:11 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p1) @ {[1:58]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2300965
- 09:47:11 DEBUG: choosing sentence: [ !GateEnter(p1) v HasTrack(p1, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:47:11 DEBUG: sentence [ !GateEnter(p1) v HasTrack(p1, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[59:60]}
- 09:47:11 DEBUG: choosing [1:58] as the interval to satisfy
- 09:47:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [1:58], D-GateEnter(p2t1) @ [1:58]}, toDel: {}
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p1) @ [1:58]})
- 09:47:11 DEBUG: taking random move: toAdd: {}, toDel: {GateEnter(p1) @ [1:58]}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2338912
- 09:47:11 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:11 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:11 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:11 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2339416
- 09:47:11 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:11 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:47:11 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:11 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:11 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2340301
- 09:47:11 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:11 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:11 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:11 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:11 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2340311
- 09:47:11 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2332787
- 09:47:11 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:11 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2340311
- 09:47:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:11 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2339965
- 09:47:11 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2338566
- 09:47:11 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:47:11 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2339070
- 09:47:11 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:11 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2340315
- 09:47:11 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:11 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:11 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:47:11 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:11 DEBUG: current score: 2282805
- 09:47:11 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:11 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:11 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:11 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:11 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2282610
- 09:47:12 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2256380
- 09:47:12 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-InCar(p1t2) v InCar(p1) ] satisfied at {[1:28], [51:60]}
- 09:47:12 DEBUG: choosing [29:50] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [29:50]}), (toAdd: {InCar(p1) @ [29:50]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {InCar(p1) @ [29:50]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2257749
- 09:47:12 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] satisfied at {[1:28], [51:60]}
- 09:47:12 DEBUG: choosing [29:50] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:50]}), (toAdd: {InCar(p2) @ [29:50]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [29:50]}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2248879
- 09:47:12 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2270580
- 09:47:12 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2259857
- 09:47:12 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2265009
- 09:47:12 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:12 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:28], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2272072
- 09:47:12 DEBUG: choosing sentence: [ !HasTrack(p2, p2t1) v !HasTrack(p2, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] to improve.
- 09:47:12 DEBUG: sentence [ !HasTrack(p2, p2t1) v !HasTrack(p2, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] satisfied at {[1:27], [29:60]}
- 09:47:12 DEBUG: choosing [28:28] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:28]}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]})
- 09:47:12 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:28]}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2309391
- 09:47:12 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:12 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:12 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:12 DEBUG: current score: 2309381
- 09:47:12 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:12 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:12 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:12 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:12 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:47:12 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:13 DEBUG: current score: 2307889
- 09:47:13 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:13 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:13 DEBUG: current score: 2294780
- 09:47:13 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:47:13 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:47:13 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:13 DEBUG: current score: 2295820
- 09:47:13 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:47:13 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:47:13 DEBUG: choosing [47:50] as the interval to satisfy
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:47:13 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:13 DEBUG: current score: 2281306
- 09:47:13 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:13 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:13 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:13 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:13 DEBUG: taking random move: toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:13 DEBUG: current score: 2259162
- 09:47:13 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:51]}
- 09:47:13 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:13 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2259666
- 09:47:13 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:13 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:13 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2258957
- 09:47:13 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] to improve.
- 09:47:13 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p1) ] satisfied at {[1:27], [31:60]}
- 09:47:13 DEBUG: choosing [28:30] as the interval to satisfy
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {})
- 09:47:13 DEBUG: choosing best local move: toAdd: {DoorOpen(p1) @ [28:30]}, toDel: {}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
ElevatorExit(p2) @ {[4:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2259944
- 09:47:13 DEBUG: choosing sentence: [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !ElevatorExit(p2) v HasTrack(p2, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:3]}
- 09:47:13 DEBUG: choosing [4:60] as the interval to satisfy
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [4:60], D-ElevatorExit(p2t2) @ [4:60]}, toDel: {}
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p2) @ [4:60]})
- 09:47:13 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorExit(p2) @ [4:60]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2282088
- 09:47:13 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] to improve.
- 09:47:13 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] satisfied at {[28:50]}
- 09:47:13 DEBUG: choosing [51:60] as the interval to satisfy
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [51:60]}), (toAdd: {HasTrack(p2, p1t1) @ [51:60]}, toDel: {})
- 09:47:13 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [51:60]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2281558
- 09:47:13 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:13 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:47:13 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:47:13 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:47:13 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:47:13 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:47:13 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:27]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:13 DEBUG: current score: 2282803
- 09:47:13 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p2, p1t2) v HasTrack(p2, p1t2) to improve.
- 09:47:13 DEBUG: sentence true at :{[1:27]}
- 09:47:13 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [28:60]}
- 09:47:13 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:46], [51:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2314381
- 09:47:14 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t2) v HasTrack(p1, p1t2) to improve.
- 09:47:14 DEBUG: sentence true at :{[1:46], [51:60]}
- 09:47:14 DEBUG: sentence NOT true at :{[(1, 46), (47, 60)], [(47, 50), (47, 60)]}
- 09:47:14 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [47:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]})
- 09:47:14 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [47:60]}, toDel: {}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2306895
- 09:47:14 DEBUG: choosing sentence: [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !Driving(p2) v HasTrack(p2, p1t2) ^ D-Driving(p1t2) v HasTrack(p2, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:1], [16:60]}
- 09:47:14 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:15], D-Driving(p1t2) @ [2:15]}, toDel: {}
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:15], D-Driving(p2t1) @ [2:15]}, toDel: {}
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2296609
- 09:47:14 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:47:14 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:47:14 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2307610
- 09:47:14 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:14 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {[1:49], [51:60]}
- 09:47:14 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [50:50]}), (toAdd: {HasTrack(p1, p2t2) @ [50:50]}, toDel: {})
- 09:47:14 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [50:50]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2293860
- 09:47:14 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[50:50]}
- 09:47:14 DEBUG: choosing [51:60] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}), (toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:49], [51:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2292429
- 09:47:14 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:14 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {[1:49], [51:60]}
- 09:47:14 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [50:50]}, toDel: {})
- 09:47:14 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [50:50]}, toDel: {}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2306679
- 09:47:14 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[50:60]}
- 09:47:14 DEBUG: choosing [1:49] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}), (toAdd: {HasTrack(p1, p2t1) @ [1:49]}, toDel: {})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2319318
- 09:47:14 DEBUG: choosing sentence: [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] to improve.
- 09:47:14 DEBUG: sentence [ !ElevatorExit(p1) v HasTrack(p1, p2t2) ^ D-ElevatorExit(p2t2) ] satisfied at {[1:54]}
- 09:47:14 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [55:60], D-ElevatorExit(p2t2) @ [55:60]}, toDel: {}
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2320203
- 09:47:14 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:14 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2319721
- 09:47:14 DEBUG: choosing sentence: [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !GateEnter(p2) v HasTrack(p2, p2t1) ^ D-GateEnter(p2t1) ] satisfied at {[1:1], [11:60]}
- 09:47:14 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:10], D-GateEnter(p2t1) @ [2:10]}, toDel: {}
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:14 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:14 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:14 DEBUG: current score: 2332255
- 09:47:14 DEBUG: choosing sentence: [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:47:14 DEBUG: sentence [ !DoorOpen(p2) v HasTrack(p2, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p2, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:20], [26:60]}
- 09:47:14 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [21:25], D-DoorOpen(p1t2) @ [21:25]}, toDel: {}
- 09:47:14 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [21:25], D-DoorOpen(p2t1) @ [21:25]}, toDel: {}
- 09:47:14 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]})
- 09:47:15 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p2) @ [21:25]}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:15 DEBUG: current score: 2333245
- 09:47:15 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:15 DEBUG: current score: 2331846
- 09:47:15 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-ElevatorExit(p2t2) v ElevatorExit(p1) ] satisfied at {[1:54]}
- 09:47:15 DEBUG: choosing [55:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [55:60]}), (toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {ElevatorExit(p1) @ [55:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:15 DEBUG: current score: 2331651
- 09:47:15 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:47:15 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:1], [21:60]}
- 09:47:15 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:15 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [2:20], D-InCar(p1t2) @ [2:20]}, toDel: {}
- 09:47:15 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [2:20], D-InCar(p2t1) @ [2:20]}, toDel: {}
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [2:20]})
- 09:47:15 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [2:20]}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:15 DEBUG: current score: 2332660
- 09:47:15 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-TrunkOpen(p2t2) v TrunkOpen(p1) ] satisfied at {[1:49], [51:60]}
- 09:47:15 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}), (toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [50:50]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25]}

- 09:47:15 DEBUG: current score: 2333210
- 09:47:15 DEBUG: choosing sentence: [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Track(p2t2) v !HasTrack(p1, p2t2) v !D-Walking(p2t2) v Walking(p1) ] satisfied at {[1:51]}
- 09:47:15 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [52:60]}), (toAdd: {Walking(p1) @ [52:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [52:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2333714
- 09:47:15 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:60]}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22], [50:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2332315
- 09:47:15 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:15 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:47:15 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [50:50], D-TrunkOpen(p1t1) @ [50:50]}, toDel: {}
- 09:47:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [50:50], D-TrunkOpen(p2t1) @ [50:50]}, toDel: {}
- 09:47:15 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [50:50], D-TrunkOpen(p2t2) @ [50:50]}, toDel: {}
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]})
- 09:47:15 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [50:50]}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2332865
- 09:47:15 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
ElevatorExit(p1) @ {[55:60]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2333347
- 09:47:15 DEBUG: choosing sentence: !ElevatorExit(p1) v <>{<} GateEnter(p1) to improve.
- 09:47:15 DEBUG: sentence true at :{[(1, 54), (1, 60)]}
- 09:47:15 DEBUG: sentence NOT true at :{[55:60]}
- 09:47:15 DEBUG: moves to consider: (toAdd: {GateEnter(p1) @ [1:58]}, toDel: {}), (toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]})
- 09:47:15 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorExit(p1) @ [55:60]}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2334232
- 09:47:15 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:15 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:15 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2334090
- 09:47:15 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:15 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:15 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}

- 09:47:15 DEBUG: current score: 2311699
- 09:47:15 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:47:15 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:47:15 DEBUG: taking random move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:47:15 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:15 DEBUG: current score: 2312739
- 09:47:15 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:15 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:15 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:15 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2301313
- 09:47:16 DEBUG: choosing sentence: [ !HasTrack(p1, p1t2) v !HasTrack(p1, p2t2) v !D-Track(p1t2) v !D-Track(p2t2) ] to improve.
- 09:47:16 DEBUG: sentence [ !HasTrack(p1, p1t2) v !HasTrack(p1, p2t2) v !D-Track(p1t2) v !D-Track(p2t2) ] satisfied at {[1:49], [51:60]}
- 09:47:16 DEBUG: choosing [50:50] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [50:50]}), (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]})
- 09:47:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [50:50]}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[1:49], [51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2312314
- 09:47:16 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[50:50]}
- 09:47:16 DEBUG: choosing [1:49] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}), (toAdd: {HasTrack(p1, p2t1) @ [1:49]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [1:49]}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2287863
- 09:47:16 DEBUG: choosing sentence: [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] to improve.
- 09:47:16 DEBUG: sentence [ Driving(p2) v !GateEnter(p2) ^ !GateExit(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:16 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {Driving(p2) @ [2:10]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]})
- 09:47:16 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10], GateExit(p2) @ [2:10]}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2299289
- 09:47:16 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:16 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2284203
- 09:47:16 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-Driving(p1t2) v Driving(p1) ] satisfied at {[1:34], [51:60]}
- 09:47:16 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [35:50]}), (toAdd: {Driving(p1) @ [35:50]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {Driving(p1) @ [35:50]}, toDel: {}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2285383
- 09:47:16 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {}
- 09:47:16 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {})
- 09:47:16 DEBUG: taking random move: toAdd: {HasTrack(p2, p1t2) @ [1:60]}, toDel: {}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t2) @ {[51:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2227873
- 09:47:16 DEBUG: choosing sentence: [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Similar(p2t2, p2t1) v !HasTrack(p1, p2t2) v HasTrack(p1, p2t1) ] satisfied at {[1:50]}
- 09:47:16 DEBUG: choosing [51:60] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}), (toAdd: {HasTrack(p1, p2t1) @ [51:60]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t2) @ [51:60]}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2263714
- 09:47:16 DEBUG: choosing sentence: [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Similar(p1t1, p2t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p2t2) ] satisfied at {}
- 09:47:16 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t2) @ [1:60]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2252411
- 09:47:16 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p1, p1t2) v !D-GateExit(p1t2) v GateExit(p1) ] satisfied at {[1:46], [51:60]}
- 09:47:16 DEBUG: choosing [47:50] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [47:50]}), (toAdd: {GateExit(p1) @ [47:50]}, toDel: {})
- 09:47:16 DEBUG: choosing best local move: toAdd: {GateExit(p1) @ [47:50]}, toDel: {}
- 09:47:16 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:16 DEBUG: current score: 2253325
- 09:47:16 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] to improve.
- 09:47:16 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-DoorOpen(p1t2) v DoorOpen(p2) ] satisfied at {[1:27], [31:60]}
- 09:47:16 DEBUG: choosing [28:30] as the interval to satisfy
- 09:47:16 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:30]}), (toAdd: {DoorOpen(p2) @ [28:30]}, toDel: {})
- 09:47:17 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [28:30]}, toDel: {}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2254312
- 09:47:17 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-GateExit(p1t2) v GateExit(p2) ] to improve.
- 09:47:17 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-GateExit(p1t2) v GateExit(p2) ] satisfied at {[1:46], [51:60]}
- 09:47:17 DEBUG: choosing [47:50] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [47:50]}), (toAdd: {GateExit(p2) @ [47:50]}, toDel: {})
- 09:47:17 DEBUG: taking random move: toAdd: {GateExit(p2) @ [47:50]}, toDel: {}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2240846
- 09:47:17 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:17 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:17 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:17 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2240500
- 09:47:17 DEBUG: choosing sentence: [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] to improve.
- 09:47:17 DEBUG: sentence [ !D-Similar(p1t2, p2t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p2t1) ] satisfied at {}
- 09:47:17 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {})
- 09:47:17 DEBUG: taking random move: toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2181588
- 09:47:17 DEBUG: choosing sentence: [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] to improve.
- 09:47:17 DEBUG: sentence [ !HasTrack(p1, p2t1) v !HasTrack(p1, p1t2) v !D-Track(p2t1) v !D-Track(p1t2) ] satisfied at {[1:27], [46:60]}
- 09:47:17 DEBUG: choosing [28:45] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:45]}), (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [28:45]})
- 09:47:17 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [28:45]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2208408
- 09:47:17 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:47:17 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:17 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}), (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:17 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [1:60]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2205681
- 09:47:17 DEBUG: choosing sentence: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:17 DEBUG: sentence [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p1, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p1, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:19], [23:60]}
- 09:47:17 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [20:22], D-TrunkOpen(p1t1) @ [20:22]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [20:22], D-TrunkOpen(p2t1) @ [20:22]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [20:22], D-TrunkOpen(p2t2) @ [20:22]}, toDel: {}
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]})
- 09:47:17 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p1) @ [20:22]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18], [23:25], [52:60]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2206580
- 09:47:17 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:17 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:51]}
- 09:47:17 DEBUG: choosing [52:60] as the interval to satisfy
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [52:60], D-Walking(p1t1) @ [52:60]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [52:60], D-Walking(p2t1) @ [52:60]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [52:60], D-Walking(p2t2) @ [52:60]}, toDel: {}
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [52:60]})
- 09:47:17 DEBUG: taking random move: toAdd: {}, toDel: {Walking(p1) @ [52:60]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2206859
- 09:47:17 DEBUG: choosing sentence: [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] to improve.
- 09:47:17 DEBUG: sentence [ !HasTrack(p2, p1t2) v !HasTrack(p2, p2t1) v !D-Track(p1t2) v !D-Track(p2t1) ] satisfied at {[1:27], [46:60]}
- 09:47:17 DEBUG: choosing [28:45] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:45]}), (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:45]})
- 09:47:17 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [28:45]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2232420
- 09:47:17 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] to improve.
- 09:47:17 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-InCar(p1t2) v InCar(p2) ] satisfied at {[1:45], [51:60]}
- 09:47:17 DEBUG: choosing [46:50] as the interval to satisfy
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [46:50]}), (toAdd: {InCar(p2) @ [46:50]}, toDel: {})
- 09:47:17 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [46:50]}, toDel: {}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2233160
- 09:47:17 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:17 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:17 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:17 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:17 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:17 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:17 DEBUG: current score: 2233506
- 09:47:17 DEBUG: choosing sentence: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:17 DEBUG: sentence [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) v HasTrack(p1, p2t1) ^ D-Walking(p2t1) v HasTrack(p1, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:1], [19:22], [26:60]}
- 09:47:17 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [23:25], D-Walking(p1t1) @ [23:25]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [23:25], D-Walking(p2t1) @ [23:25]}, toDel: {}
- 09:47:17 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t2) @ [23:25], D-Walking(p2t2) @ [23:25]}, toDel: {}
- 09:47:17 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p1) @ [23:25]})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p1) @ [23:25]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2233769
- 09:47:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:18 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p1t2) ] satisfied at {[28:45]}
- 09:47:18 DEBUG: choosing [46:60] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [46:60]}), (toAdd: {HasTrack(p1, p1t2) @ [46:60]}, toDel: {})
- 09:47:18 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t2) @ [46:60]}, toDel: {}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p1, p2t1) @ {[1:27], [46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2199988
- 09:47:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] to improve.
- 09:47:18 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p1, p2t1) v HasTrack(p1, p2t2) ] satisfied at {[28:45]}
- 09:47:18 DEBUG: choosing [46:60] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [46:60]}), (toAdd: {HasTrack(p1, p2t2) @ [46:60]}, toDel: {})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [46:60]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p1, p2t1) @ {[1:27]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2197183
- 09:47:18 DEBUG: choosing sentence: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p2t1) v HasTrack(p1, p2t1) to improve.
- 09:47:18 DEBUG: sentence true at :{[1:27]}
- 09:47:18 DEBUG: sentence NOT true at :{[(1, 27), (28, 60)], [28:60]}
- 09:47:18 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p2t1) @ [1:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}), (toAdd: {HasTrack(p1, p2t1) @ [28:60]}, toDel: {}), (toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p2t1) @ [1:60]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2233052
- 09:47:18 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] to improve.
- 09:47:18 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-TrunkOpen(p2t1) v TrunkOpen(p2) ] satisfied at {[1:30], [46:60]}
- 09:47:18 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [31:45]}), (toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {})
- 09:47:18 DEBUG: taking random move: toAdd: {TrunkOpen(p2) @ [31:45]}, toDel: {}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2234297
- 09:47:18 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:18 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:34], [46:60]}
- 09:47:18 DEBUG: choosing [35:45] as the interval to satisfy
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [35:45], D-Driving(p1t2) @ [35:45]}, toDel: {}
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [35:45], D-Driving(p2t1) @ [35:45]}, toDel: {}
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [35:45]})
- 09:47:18 DEBUG: taking random move: toAdd: {}, toDel: {Driving(p1) @ [35:45]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2235412
- 09:47:18 DEBUG: choosing sentence: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] to improve.
- 09:47:18 DEBUG: sentence [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] satisfied at {[6:60]}
- 09:47:18 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t1) @ [1:5], D-ElevatorEnter(p1t1) @ [1:5]}, toDel: {}
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:18 DEBUG: taking random move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:27], [46:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2235502
- 09:47:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] to improve.
- 09:47:18 DEBUG: sentence [ !D-Similar(p2t1, p1t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p1t2) ] satisfied at {[1:27], [46:60]}
- 09:47:18 DEBUG: choosing [28:45] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [28:45]}), (toAdd: {HasTrack(p2, p1t2) @ [28:45]}, toDel: {})
- 09:47:18 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p1t2) @ [28:45]}, toDel: {}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2209266
- 09:47:18 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:18 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:18 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:18 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
Driving(p2) @ {[2:15]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2252870
- 09:47:18 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:47:18 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:18 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [2:15]}), (toAdd: {InCar(p2) @ [2:15]}, toDel: {})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [2:15]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:18 DEBUG: current score: 2269544
- 09:47:18 DEBUG: choosing sentence: [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] to improve.
- 09:47:18 DEBUG: sentence [ !Walking(p2) v HasTrack(p2, p1t1) ^ D-Walking(p1t1) v HasTrack(p2, p2t1) ^ D-Walking(p2t1) v HasTrack(p2, p2t2) ^ D-Walking(p2t2) ] satisfied at {[1:25], [31:60]}
- 09:47:18 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [26:30], D-Walking(p1t1) @ [26:30]}, toDel: {}
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [26:30], D-Walking(p2t1) @ [26:30]}, toDel: {}
- 09:47:18 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [26:30], D-Walking(p2t2) @ [26:30]}, toDel: {}
- 09:47:18 DEBUG: moves to consider: (toAdd: {}, toDel: {Walking(p2) @ [26:30]})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {Walking(p2) @ [26:30]}
- 09:47:18 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
GateExit(p1) @ {[47:50]}
GateExit(p2) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}

- 09:47:18 DEBUG: current score: 2270584
- 09:47:18 DEBUG: choosing sentence: !GateExit(p2) v <>{<} ElevatorEnter(p2) to improve.
- 09:47:18 DEBUG: sentence true at :{[(1, 46), (1, 60)], [(47, 50), (51, 60)], [51:60]}
- 09:47:18 DEBUG: sentence NOT true at :{[47:50]}
- 09:47:18 DEBUG: moves to consider: (toAdd: {ElevatorEnter(p2) @ [1:48]}, toDel: {}), (toAdd: {}, toDel: {GateExit(p2) @ [47:50]})
- 09:47:18 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p2) @ [47:50]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t2) @ {[46:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2284050
- 09:47:19 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p1, p1t2) v HasTrack(p1, p1t1) ] satisfied at {[1:45]}
- 09:47:19 DEBUG: choosing [46:60] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [46:60]}), (toAdd: {HasTrack(p1, p1t1) @ [46:60]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p1, p1t2) @ [46:60]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2318341
- 09:47:19 DEBUG: choosing sentence: [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] to improve.
- 09:47:19 DEBUG: sentence [ !TrunkOpen(p2) v HasTrack(p2, p1t1) ^ D-TrunkOpen(p1t1) v HasTrack(p2, p2t1) ^ D-TrunkOpen(p2t1) v HasTrack(p2, p2t2) ^ D-TrunkOpen(p2t2) ] satisfied at {[1:30], [46:60]}
- 09:47:19 DEBUG: choosing [31:45] as the interval to satisfy
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t1) @ [31:45], D-TrunkOpen(p1t1) @ [31:45]}, toDel: {}
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [31:45], D-TrunkOpen(p2t1) @ [31:45]}, toDel: {}
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t2) @ [31:45], D-TrunkOpen(p2t2) @ [31:45]}, toDel: {}
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {TrunkOpen(p2) @ [31:45]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
GateExit(p1) @ {[47:50]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2319586
- 09:47:19 DEBUG: choosing sentence: !GateExit(p1) v <>{<} ElevatorEnter(p1) to improve.
- 09:47:19 DEBUG: sentence true at :{[(1, 46), (1, 60)], [(47, 50), (51, 60)], [51:60]}
- 09:47:19 DEBUG: sentence NOT true at :{[47:50]}
- 09:47:19 DEBUG: moves to consider: (toAdd: {ElevatorEnter(p1) @ [1:48]}, toDel: {}), (toAdd: {}, toDel: {GateExit(p1) @ [47:50]})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {GateExit(p1) @ [47:50]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2320560
- 09:47:19 DEBUG: choosing sentence: [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] to improve.
- 09:47:19 DEBUG: sentence [ !DoorOpen(p1) v HasTrack(p1, p1t2) ^ D-DoorOpen(p1t2) v HasTrack(p1, p2t1) ^ D-DoorOpen(p2t1) ] satisfied at {[1:27], [31:60]}
- 09:47:19 DEBUG: choosing [28:30] as the interval to satisfy
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [28:30], D-DoorOpen(p1t2) @ [28:30]}, toDel: {}
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [28:30], D-DoorOpen(p2t1) @ [28:30]}, toDel: {}
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {DoorOpen(p1) @ [28:30]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p1) @ {[46:50]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2321547
- 09:47:19 DEBUG: choosing sentence: [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] to improve.
- 09:47:19 DEBUG: sentence [ !Driving(p1) v HasTrack(p1, p1t2) ^ D-Driving(p1t2) v HasTrack(p1, p2t1) ^ D-Driving(p2t1) ] satisfied at {[1:45], [51:60]}
- 09:47:19 DEBUG: choosing [46:50] as the interval to satisfy
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p1t2) @ [46:50], D-Driving(p1t2) @ [46:50]}, toDel: {}
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p1, p2t1) @ [46:50], D-Driving(p2t1) @ [46:50]}, toDel: {}
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p1) @ [46:50]})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p1) @ [46:50]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2322287
- 09:47:19 DEBUG: choosing sentence: [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Track(p1t2) v !HasTrack(p2, p1t2) v !D-Driving(p1t2) v Driving(p2) ] satisfied at {[1:34], [51:60]}
- 09:47:19 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [35:50]}), (toAdd: {Driving(p2) @ [35:50]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [35:50]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2301167
- 09:47:19 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:19 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:19 DEBUG: taking random move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2305447
- 09:47:19 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:19 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2305437
- 09:47:19 DEBUG: choosing sentence: [ HasTrack(p2, p2t1) ] to improve.
- 09:47:19 DEBUG: sentence [ HasTrack(p2, p2t1) ] satisfied at {}
- 09:47:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {})
- 09:47:19 DEBUG: taking random move: toAdd: {HasTrack(p2, p2t1) @ [1:60]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[46:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2255675
- 09:47:19 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:47:19 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:34], [46:60]}
- 09:47:19 DEBUG: choosing [35:45] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [35:45]}), (toAdd: {InCar(p2) @ [35:45]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [35:45]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[35:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2278206
- 09:47:19 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-GateEnter(p2t1) v GateEnter(p2) ] satisfied at {[1:1], [11:60]}
- 09:47:19 DEBUG: choosing [2:10] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:10]}), (toAdd: {GateEnter(p2) @ [2:10]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {GateEnter(p2) @ [2:10]}, toDel: {}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[35:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2266780
- 09:47:19 DEBUG: choosing sentence: [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Similar(p1t2, p1t1) v !HasTrack(p2, p1t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:47:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p1t2) @ [1:60]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[35:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2318480
- 09:47:19 DEBUG: choosing sentence: [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] to improve.
- 09:47:19 DEBUG: sentence [ !InCar(p2) v HasTrack(p2, p1t2) ^ D-InCar(p1t2) v HasTrack(p2, p2t1) ^ D-InCar(p2t1) ] satisfied at {[1:34], [51:60]}
- 09:47:19 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p1t2) @ [35:50], D-InCar(p1t2) @ [35:50]}, toDel: {}
- 09:47:19 DEBUG: removing invalid move: toAdd: {HasTrack(p2, p2t1) @ [35:50], D-InCar(p2t1) @ [35:50]}, toDel: {}
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {InCar(p2) @ [35:50]})
- 09:47:19 DEBUG: choosing best local move: toAdd: {}, toDel: {InCar(p2) @ [35:50]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:19 DEBUG: current score: 2296060
- 09:47:19 DEBUG: choosing sentence: [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] to improve.
- 09:47:19 DEBUG: sentence [ !D-Similar(p1t1, p1t2) v !HasTrack(p1, p1t1) v HasTrack(p1, p1t2) ] satisfied at {}
- 09:47:19 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:19 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}), (toAdd: {HasTrack(p1, p1t2) @ [1:60]}, toDel: {})
- 09:47:19 DEBUG: taking random move: toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:60]}
- 09:47:19 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
Driving(p2) @ {[35:50]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2291200
- 09:47:20 DEBUG: choosing sentence: [ !Driving(p2) v InCar(p2) ] to improve.
- 09:47:20 DEBUG: sentence [ !Driving(p2) v InCar(p2) ] satisfied at {[1:34], [51:60]}
- 09:47:20 DEBUG: choosing [35:50] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {Driving(p2) @ [35:50]}), (toAdd: {InCar(p2) @ [35:50]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {}, toDel: {Driving(p2) @ [35:50]}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2315980
- 09:47:20 DEBUG: choosing sentence: [ HasTrack(p1, p1t1) ] to improve.
- 09:47:20 DEBUG: sentence [ HasTrack(p1, p1t1) ] satisfied at {}
- 09:47:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {HasTrack(p1, p1t1) @ [1:60]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2320840
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-DoorOpen(p2t1) v DoorOpen(p2) ] satisfied at {[1:20], [26:60]}
- 09:47:20 DEBUG: choosing [21:25] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [21:25]}), (toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {DoorOpen(p2) @ [21:25]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
ElevatorEnter(p1) @ {[1:5]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2321830
- 09:47:20 DEBUG: choosing sentence: !ElevatorEnter(p1) v <>{>} GateExit(p1) to improve.
- 09:47:20 DEBUG: sentence true at :{[(1, 5), (6, 60)], [6:60]}
- 09:47:20 DEBUG: sentence NOT true at :{[1:5]}
- 09:47:20 DEBUG: moves to consider: (toAdd: {GateExit(p1) @ [3:60]}, toDel: {}), (toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]})
- 09:47:20 DEBUG: choosing best local move: toAdd: {}, toDel: {ElevatorEnter(p1) @ [1:5]}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
GateEnter(p2) @ {[2:10]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2321840
- 09:47:20 DEBUG: choosing sentence: !GateEnter(p2) v <>{>} ElevatorExit(p2) to improve.
- 09:47:20 DEBUG: sentence true at :{[(1, 1), (1, 60)], [(2, 10), (11, 60)], [11:60]}
- 09:47:20 DEBUG: sentence NOT true at :{[2:10]}
- 09:47:20 DEBUG: moves to consider: (toAdd: {ElevatorExit(p2) @ [4:60]}, toDel: {}), (toAdd: {}, toDel: {GateEnter(p2) @ [2:10]})
- 09:47:20 DEBUG: choosing best local move: toAdd: {}, toDel: {GateEnter(p2) @ [2:10]}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2333266
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Driving(p2t1) v Driving(p2) ] satisfied at {[1:1], [16:60]}
- 09:47:20 DEBUG: choosing [2:15] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:15]}), (toAdd: {Driving(p2) @ [2:15]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {Driving(p2) @ [2:15]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2318180
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-InCar(p2t1) v InCar(p2) ] satisfied at {[1:1], [21:60]}
- 09:47:20 DEBUG: choosing [2:20] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [2:20]}), (toAdd: {InCar(p2) @ [2:20]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {InCar(p2) @ [2:20]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2335069
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] satisfied at {[1:19], [23:60]}
- 09:47:20 DEBUG: choosing [20:22] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [20:22]}), (toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {TrunkOpen(p1) @ [20:22]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}

- 09:47:20 DEBUG: current score: 2335968
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p2t1) v !HasTrack(p2, p2t1) v !D-Walking(p2t1) v Walking(p2) ] satisfied at {[1:25], [31:60]}
- 09:47:20 DEBUG: choosing [26:30] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [26:30]}), (toAdd: {Walking(p2) @ [26:30]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {Walking(p2) @ [26:30]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:20 DEBUG: current score: 2337008
- 09:47:20 DEBUG: choosing sentence: [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Similar(p2t1, p2t2) v !HasTrack(p2, p2t1) v HasTrack(p2, p2t2) ] satisfied at {}
- 09:47:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t1) @ [1:60]}), (toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {HasTrack(p2, p2t2) @ [1:60]}, toDel: {}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
HasTrack(p2, p2t2) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:20 DEBUG: current score: 2335609
- 09:47:20 DEBUG: choosing sentence: [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Similar(p2t2, p1t1) v !HasTrack(p2, p2t2) v HasTrack(p2, p1t1) ] satisfied at {}
- 09:47:20 DEBUG: choosing [1:60] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}), (toAdd: {HasTrack(p2, p1t1) @ [1:60]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {}, toDel: {HasTrack(p2, p2t2) @ [1:60]}
- 09:47:20 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18]}
Walking(p2) @ {[26:30]}

- 09:47:20 DEBUG: current score: 2337008
- 09:47:20 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] to improve.
- 09:47:20 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] satisfied at {[1:22], [26:60]}
- 09:47:20 DEBUG: choosing [23:25] as the interval to satisfy
- 09:47:20 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [23:25]}), (toAdd: {Walking(p1) @ [23:25]}, toDel: {})
- 09:47:20 DEBUG: choosing best local move: toAdd: {Walking(p1) @ [23:25]}, toDel: {}
- 09:47:21 DEBUG: currentModel: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p2) @ {[21:25], [28:30]}
Driving(p2) @ {[2:15]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

- 09:47:21 DEBUG: current score: 2337955
- 09:47:21 DEBUG: choosing sentence: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] to improve.
- 09:47:21 DEBUG: sentence [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] satisfied at {[6:60]}
- 09:47:21 DEBUG: choosing [1:5] as the interval to satisfy
- 09:47:21 DEBUG: moves to consider: (toAdd: {}, toDel: {HasTrack(p1, p1t1) @ [1:5]}), (toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {})
- 09:47:21 DEBUG: choosing best local move: toAdd: {ElevatorEnter(p1) @ [1:5]}, toDel: {}
- 09:47:21 INFO: Best model found: 

- 09:47:21 INFO: D-DoorOpen(p1t2) @ {[28:30]}
D-DoorOpen(p2t1) @ {[21:25]}
D-Driving(p1t2) @ {[35:50]}
D-Driving(p2t1) @ {[2:15]}
D-ElevatorEnter(p1t1) @ {[1:5]}
D-ElevatorExit(p2t2) @ {[55:60]}
D-GateEnter(p2t1) @ {[2:10]}
D-GateExit(p1t2) @ {[47:50]}
D-InCar(p1t2) @ {[29:50]}
D-InCar(p2t1) @ {[2:20]}
D-Similar(p1t1, p1t2) @ {[1:60]}
D-Similar(p1t1, p2t2) @ {[1:60]}
D-Similar(p1t2, p1t1) @ {[1:60]}
D-Similar(p1t2, p2t1) @ {[1:60]}
D-Similar(p2t1, p1t2) @ {[1:60]}
D-Similar(p2t1, p2t2) @ {[1:60]}
D-Similar(p2t2, p1t1) @ {[1:60]}
D-Similar(p2t2, p2t1) @ {[1:60]}
D-Track(p1t1) @ {[1:25]}
D-Track(p1t2) @ {[28:50]}
D-Track(p2t1) @ {[2:45]}
D-Track(p2t2) @ {[50:60]}
D-TrunkOpen(p1t1) @ {[20:22]}
D-TrunkOpen(p2t1) @ {[31:45]}
D-TrunkOpen(p2t2) @ {[50:50]}
D-Walking(p1t1) @ {[2:18], [23:25]}
D-Walking(p2t1) @ {[26:30]}
D-Walking(p2t2) @ {[52:60]}
DoorOpen(p1) @ {[28:30]}
DoorOpen(p2) @ {[21:25]}
Driving(p1) @ {[35:50]}
Driving(p2) @ {[2:15]}
ElevatorEnter(p1) @ {[1:5]}
GateExit(p1) @ {[47:50]}
HasTrack(p1, p1t1) @ {[1:60]}
HasTrack(p1, p1t2) @ {[1:60]}
HasTrack(p2, p2t1) @ {[1:60]}
InCar(p1) @ {[29:50]}
InCar(p2) @ {[2:20]}
TrunkOpen(p1) @ {[20:22]}
TrunkOpen(p2) @ {[31:45]}
Walking(p1) @ {[2:18], [23:25]}
Walking(p2) @ {[26:30]}

