- 11:24:14 INFO: Opened log file for new session
- 11:24:15 INFO: model size: 175
- 11:24:15 DEBUG: observation predicates: 
- 11:24:15 DEBUG: 	D-DoorOpen
- 11:24:15 DEBUG: 	D-Driving
- 11:24:15 DEBUG: 	D-ElevatorEnter
- 11:24:15 DEBUG: 	D-GateExit
- 11:24:15 DEBUG: 	D-InCar
- 11:24:15 DEBUG: 	D-Track
- 11:24:15 DEBUG: 	D-TrunkOpen
- 11:24:15 DEBUG: 	D-Walking
- 11:24:15 DEBUG: 	HasTrack
- 11:24:15 INFO: performing unit propagation...
- 11:24:15 DEBUG: found 16 unit clauses.
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: working on inf: [ DoorOpen(p1) ] @ {[27:30]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: propagating HasTrack(p1, p1t1) into HasTrack(p1, p1t1)

- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 11:24:15 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 11:24:15 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
