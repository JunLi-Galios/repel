- 15:12:17 INFO: Opened log file for new session
- 15:12:17 INFO: model size: 175
- 15:12:17 INFO: running unit propagation...
- 15:12:17 INFO: performing unit propagation...
- 15:12:17 DEBUG: found 18 unit clauses.
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) v ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) v GateEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorExit(p1) v <>{<} GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagating !ElevatorExit(p1) into !ElevatorExit(p1)

- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 15:12:17 ERROR: propagating simple lit into diamond op containing negative currently not implemented! ignoring
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorExit(p1) v <>{m} ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagating !ElevatorExit(p1) into !ElevatorExit(p1)

- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) v GateEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !GateEnter(p1) v <>{>} ElevatorExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagating !GateEnter(p1) into !GateEnter(p1)

- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateEnter(p1) v <>{m} GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagating !GateEnter(p1) into !GateEnter(p1)

- 15:12:17 DEBUG: propagate_literal called with lit=!GateEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-DoorOpen(p1t1) @ {[1:26], [31:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Driving(p1t1) @ {[35:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Driving(p1t1) @ {[1:34]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-ElevatorEnter(p1t1) @ {[6:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-GateExit(p1t1) @ {[47:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (1, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-GateExit(p1t1) @ {[1:46]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ InCar(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-InCar(p1t1) @ {[29:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ InCar(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-InCar(p1t1) @ {[1:28]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ InCar(p1) v !D-Track(p1t1) v !HasTrack(p1, p1t1) ] @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-TrunkOpen(p1t1) v TrunkOpen(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ TrunkOpen(p1) v !D-TrunkOpen(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Walking(p1t1) v Walking(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) v !D-Walking(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Track(p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ TrunkOpen(p1) v !D-TrunkOpen(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) v !D-Walking(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ TrunkOpen(p1) v !D-TrunkOpen(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:19], [23:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) v !D-Walking(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-TrunkOpen(p1t1) @ {[1:19], [23:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) v !D-Walking(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Walking(p1) ] @ {[2:18], [23:26]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) v !D-Walking(p1t1) v !HasTrack(p1, p1t1) ] @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Walking(p1) ] @ {[2:18], [23:26]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=!D-Walking(p1t1) @ {[1:1], [19:22], [27:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: working on inf: [ DoorOpen(p1) ] @ {[27:30]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: working on inf: [ Driving(p1) ] @ {[35:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: working on inf: [ ElevatorEnter(p1) ] @ {[1:5]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-ElevatorExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-GateEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: working on inf: [ GateExit(p1) ] @ {[47:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: working on inf: [ InCar(p1) ] @ {[29:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: working on inf: [ TrunkOpen(p1) ] @ {[20:22]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !HasTrack(p1, p1t1) v Walking(p1) ] @ {[2:18], [23:26]}
- 15:12:17 DEBUG: working on inf: [ Walking(p1) ] @ {[2:18], [23:26]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: working on inf: !<>{m, mi, o, oi, s, si, d, di, f, fi, =, >, <} HasTrack(p1, p1t1) v HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:17 DEBUG: propagating HasTrack(p1, p1t1) into HasTrack(p1, p1t1)

- 15:12:17 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[27:30]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=DoorOpen(p1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[35:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ InCar(p1) ] @ {[35:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) ] @ {[35:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Driving(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagating ElevatorEnter(p1) into !ElevatorEnter(p1)

- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagating ElevatorEnter(p1) into !ElevatorEnter(p1)

- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-ElevatorExit(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!D-GateEnter(p1t1) @ {[1:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[1:50]}
- 15:12:18 DEBUG: propagating GateExit(p1) into !GateExit(p1)

- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[29:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[29:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[20:22]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=TrunkOpen(p1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[1:50]}
- 15:12:18 DEBUG: working on inf: [ HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[2:18], [23:26]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=Walking(p1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) @ {[27:30]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Driving(p1t1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=InCar(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!TrunkOpen(p1) ^ !DoorOpen(p1) @ {[35:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=<>{>} GateExit(p1) @ {[1:5]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-GateExit(p1t1) @ {[47:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-InCar(p1t1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=!ElevatorEnter(p1) ^ !ElevatorExit(p1) @ {[29:50]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) @ {[20:22]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-DoorOpen(p1t1) v DoorOpen(p1) ] @ {[(1, 26), (27, 50)], [(27, 30), (31, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-Driving(p1t1) v Driving(p1) ] @ {[(1, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-ElevatorEnter(p1t1) v ElevatorEnter(p1) ] @ {[(1, 5), (6, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-GateExit(p1t1) v GateExit(p1) ] @ {[(1, 46), (47, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !D-Track(p1t1) v !HasTrack(p1, p1t1) v !D-InCar(p1t1) v InCar(p1) ] @ {[(1, 28), (29, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !DoorOpen(p1) v HasTrack(p1, p1t1) ^ D-DoorOpen(p1t1) ] @ {[(1, 26), (1, 50)], [(27, 30), (31, 50)], [31:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v HasTrack(p1, p1t1) ^ D-Driving(p1t1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !ElevatorEnter(p1) v HasTrack(p1, p1t1) ^ D-ElevatorEnter(p1t1) ] @ {[(1, 5), (6, 50)], [6:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !GateExit(p1) v HasTrack(p1, p1t1) ^ D-GateExit(p1t1) ] @ {[(1, 46), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v HasTrack(p1, p1t1) ^ D-InCar(p1t1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) v HasTrack(p1, p1t1) ^ D-TrunkOpen(p1t1) ] @ {[(1, 19), (1, 50)], [(20, 22), (23, 50)], [23:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Walking(p1) v HasTrack(p1, p1t1) ^ D-Walking(p1t1) ] @ {[(1, 1), (1, 50)], [(2, 18), (19, 50)], [(19, 22), (19, 50)], [(23, 26), (27, 50)], [27:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ Walking(p1) ^ !InCar(p1) v !Walking(p1) ^ InCar(p1) v !Walking(p1) ^ !InCar(p1) ] @ {[1:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !Driving(p1) v InCar(p1) ] @ {[(1, 28), (1, 50)], [(29, 34), (35, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !InCar(p1) v !ElevatorEnter(p1) ^ !ElevatorExit(p1) ] @ {[(1, 28), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ Driving(p1) v !GateEnter(p1) ^ !GateExit(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: [ !TrunkOpen(p1) ^ !DoorOpen(p1) v !Driving(p1) ] @ {[(1, 34), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !ElevatorEnter(p1) v <>{>} GateExit(p1) @ {[(1, 5), (49, 50)], [(6, 48), (49, 50)], [49:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !GateExit(p1) v <>{<} ElevatorEnter(p1) @ {[(1, 2), (1, 50)]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} ElevatorEnter(p1) @ {[1:5]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorExit(p1) v GateEnter(p1) v GateExit(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !ElevatorEnter(p1) v <>{m} ElevatorEnter(p1) @ {[(1, 1), (6, 50)], [7:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v <>{m} GateExit(p1) @ {[47:50]}
- 15:12:18 DEBUG: propagate_literal called with lit=HasTrack(p1, p1t1) ^ D-Walking(p1t1) @ {[2:18], [23:26]}
- 15:12:18 DEBUG: working on inf: !<>{m, o, fi, <} (DoorOpen(p1) v Driving(p1) v ElevatorEnter(p1) v ElevatorExit(p1) v GateEnter(p1) v InCar(p1) v TrunkOpen(p1) v Walking(p1)) v !GateExit(p1) v <>{m} GateExit(p1) @ {[(1, 46), (1, 50)]}
