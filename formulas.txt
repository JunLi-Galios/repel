# test formulas file
#
# format is: "weight: formula". 
# Symbols:
#   Atom: pred(constant, ..., constant)
#     currently variables are not working (neither are types)
#   Negation: ! or ~
#   Disjunction: v or |
#   Implication: -> or =>
#   LiquidOp: [ <subformula ]
#   Conjunction: ^{<relations>} or &{relations}
#     with no relation given, defaults to = relation
#     ";" is an alias for ^{m}
#     multiple relations are separated by commas, ie P(x) ^{m,mi} Q(x)
#   Diamond: <>{<relations>} <atom>
#     note that diamondop has pretty high precedence so you may need ()s
#     relations are specified as before
#        

type: Hand = (Left,Right,Both)

inf: D-Eating(Gary) -> Eating(Gary)
inf: D-Walking(Gary) -> Walking(Gary)
inf: D-Driving(Gary) -> Driving(Gary)
inf: D-Working(Gary) -> Working(Gary)
inf: Eating(Gary) -> D-Eating(Gary)
inf: Walking(Gary) -> D-Walking(Gary)
inf: Driving(Gary) -> D-Driving(Gary)
inf: Working(Gary) -> D-Working(Gary)

inf: (Eating(Gary) ^ !Walking(Gary) ^ !Driving(Gary) ^ !Working(Gary)) v (!Eating(Gary) ^ Walking(Gary) ^ !Driving(Gary) ^ !Working(Gary)) v (!Eating(Gary) ^ !Walking(Gary) ^ Driving(Gary) ^ !Working(Gary)) v (!Eating(Gary) ^ !Walking(Gary) ^ !Driving(Gary) ^ Working(Gary))

inf: Eating(Gary) -> <>{mi} [(Eating(Gary) v Walking(Gary))]
inf: !(Walking(Gary);Driving(Gary);Walking(Gary)) v <>{m,mi} Walking(Gary) v DroveToWork(Gary)
inf: Working(Gary) -> <>{m} Working(Gary) v <>{m} DroveToWork(Gary)
